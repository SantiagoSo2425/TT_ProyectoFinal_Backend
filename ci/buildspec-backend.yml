version: 0.2

# Buildspec para CodeBuild - Backend API Festivos
# OPTIMIZADO PARA FREE TIER - COSTO CERO
# Free Tier: 100 minutos de build/mes gratis en compute type BUILD_GENERAL1_SMALL

env:
  variables:
    # Variables de configuración - Free Tier Optimized
    JAVA_HOME: "/usr/lib/jvm/java-17-amazon-corretto"
    MAVEN_OPTS: "-Xmx512m -XX:MaxMetaspaceSize=256m"  # Reducido para free tier
    # Variables de Docker/ECR (se configuran en CodeBuild)
    # AWS_DEFAULT_REGION: us-east-1
    # AWS_ACCOUNT_ID: 123456789012
    # IMAGE_REPO_NAME: festivos-api
    # IMAGE_TAG: latest
  
  # Variables secretas desde Parameter Store (incluidas en free tier)
  parameter-store:
    SONAR_TOKEN: /festivos-api/sonar/token

phases:
  pre_build:
    commands:
      - echo "🔐 Iniciando fase pre_build - Free Tier Mode"
      - echo "Verificando versiones..."
      - java -version
      - mvn --version
      - docker --version

      # Login a ECR (incluido en free tier)
      - echo "🔑 Login a Amazon ECR..."
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      
      # Verificar repositorio ECR
      - echo "📦 Verificando repositorio ECR..."
      - aws ecr describe-repositories --repository-names $IMAGE_REPO_NAME --region $AWS_DEFAULT_REGION || aws ecr create-repository --repository-name $IMAGE_REPO_NAME --region $AWS_DEFAULT_REGION

  build:
    commands:
      - echo "🔨 Iniciando fase build - Modo Free Tier"
      - echo "Build iniciado el $(date)"

      # Cambiar al directorio del proyecto Spring Boot
      - cd apiFestivos
      
      # Maven clean compile (skip tests para reducir tiempo de build en free tier)
      - echo "📦 Compilando con Maven..."
      - mvn clean compile -DskipTests=true -q

      # Ejecutar tests unitarios (limitados para free tier)
      - echo "🧪 Ejecutando tests esenciales..."
      - mvn test -Dtest="**/FestivoServicioTest,**/PaisServicioTest" -q

      # Package JAR
      - echo "📦 Creando JAR..."
      - mvn package -DskipTests=true -q

      # Verificar que el JAR se creó
      - ls -la aplicacion/target/aplicacion-*.jar

      # Build Docker image (optimizado para free tier)
      - echo "🐳 Construyendo imagen Docker..."
      - IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker build -t $IMAGE_REPO_NAME .
      - docker tag $IMAGE_REPO_NAME:latest $IMAGE_URI

  post_build:
    commands:
      - echo "🚀 Iniciando fase post_build"
      - echo "Build completado el $(date)"

      # Push imagen a ECR
      - echo "📤 Subiendo imagen a ECR..."
      - IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - docker push $IMAGE_URI

      # Crear imagedefinitions.json para CodePipeline
      - echo "📄 Creando imagedefinitions.json..."
      - printf '[{"name":"festivos-api","imageUri":"%s"}]' $IMAGE_URI > imagedefinitions.json
      - cat imagedefinitions.json
      
      # Cleanup para liberar espacio (importante en free tier)
      - echo "🧹 Limpiando recursos temporales..."
      - docker system prune -f
      - mvn clean -q

artifacts:
  files:
    - imagedefinitions.json
    - infrastructure/ecs-task-definition.json

cache:
  paths:
    - '/root/.m2/**/*'  # Cache de Maven para reducir tiempo de build

# Configuración optimizada para Free Tier
# - compute-type: BUILD_GENERAL1_SMALL (incluido en free tier)
# - Builds limitados: 100 minutos/mes gratis
# - Tests reducidos para minimizar tiempo de build
# - Cache de Maven para acelerar builds posteriores
