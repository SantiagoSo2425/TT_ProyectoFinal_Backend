<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# API de Festivos - Docker Setup&#10;&#10;Esta API gestiona festivos de diferentes países usando Spring Boot, PostgreSQL y análisis de código con SonarQube.&#10;&#10;## Arquitectura&#10;&#10;- **API**: Spring Boot con arquitectura hexagonal&#10;- **Base de Datos**: PostgreSQL 15&#10;- **Análisis de Código**: SonarQube Community&#10;- **Cobertura de Código**: JaCoCo&#10;- **Contenedores**: Docker &amp; Docker Compose&#10;&#10;## Prerequisitos&#10;&#10;- Docker Desktop&#10;- Docker Compose&#10;- Git&#10;&#10;## Estructura del Proyecto&#10;&#10;```&#10;├── apiFestivos/           # Código fuente de la API&#10;│   ├── dominio/          # Entidades y DTOs&#10;│   ├── core/             # Interfaces de servicios&#10;│   ├── aplicacion/       # Implementación de servicios&#10;│   ├── infraestructura/  # Repositorios&#10;│   ├── presentacion/     # Controladores y configuración&#10;│   └── Dockerfile        # Imagen Docker para la API&#10;├── bd/                   # Scripts de base de datos&#10;├── docker-compose.yml    # Configuración de servicios&#10;└── Makefile             # Comandos útiles&#10;```&#10;&#10;## Servicios Incluidos&#10;&#10;| Servicio | Puerto | Descripción |&#10;|----------|--------|-------------|&#10;| api-festivos | 8080 | API REST de festivos |&#10;| postgres | 5432 | Base de datos PostgreSQL |&#10;| sonarqube | 9000 | Análisis de calidad de código |&#10;&#10;## Inicio Rápido&#10;&#10;### 1. Clonar y navegar al proyecto&#10;```bash&#10;git clone &lt;repositorio&gt;&#10;cd TT_ANI_ProyectoFestivos&#10;```&#10;&#10;### 2. Levantar servicios base&#10;```bash&#10;docker-compose up -d postgres sonarqube&#10;```&#10;&#10;### 3. Esperar inicialización (30-60 segundos)&#10;```bash&#10;# Verificar que PostgreSQL esté listo&#10;docker-compose logs postgres&#10;&#10;# Verificar que SonarQube esté listo&#10;docker-compose logs sonarqube&#10;```&#10;&#10;### 4. Levantar la API&#10;```bash&#10;docker-compose up -d api-festivos&#10;```&#10;&#10;### 5. Verificar servicios&#10;```bash&#10;# Health check de la API&#10;curl http://localhost:8080/actuator/health&#10;&#10;# Acceder a SonarQube&#10;# http://localhost:9000 (admin/admin)&#10;```&#10;&#10;## Pruebas y Calidad de Código&#10;&#10;### Configuración de Cobertura de Código&#10;&#10;El proyecto está configurado con **JaCoCo** para generar reportes de cobertura en proyectos multi-módulo:&#10;&#10;#### Configuración en POM padre (`pom.xml`)&#10;```xml&#10;&lt;properties&gt;&#10;    &lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#10;    &lt;!-- Configuración para SonarQube multi-módulo --&gt;&#10;    &lt;sonar.java.coveragePlugin&gt;jacoco&lt;/sonar.java.coveragePlugin&gt;&#10;    &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;        **/target/site/jacoco/jacoco.xml,&#10;        **/target/site/jacoco-aggregate/jacoco.xml&#10;    &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;&lt;/properties&gt;&#10;&#10;&lt;build&gt;&#10;    &lt;plugins&gt;&#10;        &lt;plugin&gt;&#10;            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#10;            &lt;version&gt;${jacoco.version}&lt;/version&gt;&#10;            &lt;executions&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;prepare-agent&lt;/id&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;prepare-agent&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;report&lt;/id&gt;&#10;                    &lt;phase&gt;test&lt;/phase&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;report&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;                &lt;execution&gt;&#10;                    &lt;id&gt;report-aggregate&lt;/id&gt;&#10;                    &lt;phase&gt;verify&lt;/phase&gt;&#10;                    &lt;goals&gt;&#10;                        &lt;goal&gt;report-aggregate&lt;/goal&gt;&#10;                    &lt;/goals&gt;&#10;                &lt;/execution&gt;&#10;            &lt;/executions&gt;&#10;        &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;&lt;/build&gt;&#10;```&#10;&#10;### Ejecutar Pruebas con Cobertura&#10;&#10;#### Opción 1: Maven Local&#10;```bash&#10;# Ejecutar todas las pruebas con cobertura&#10;cd apiFestivos&#10;mvn clean verify&#10;&#10;# Solo pruebas (sin agregación)&#10;mvn clean test&#10;&#10;# Generar reportes agregados de cobertura&#10;mvn clean verify jacoco:report-aggregate&#10;```&#10;&#10;#### Opción 2: Docker&#10;```bash&#10;# Ejecutar todas las pruebas&#10;docker-compose exec api-festivos mvn clean verify&#10;&#10;# Solo pruebas unitarias&#10;docker-compose exec api-festivos mvn test&#10;&#10;# Ver reportes de cobertura&#10;docker-compose exec api-festivos find . -name &quot;jacoco.xml&quot; -type f&#10;```&#10;&#10;### Ubicación de Reportes de Cobertura&#10;&#10;Los reportes se generan en las siguientes ubicaciones:&#10;&#10;```&#10;apiFestivos/&#10;├── aplicacion/target/site/jacoco/          # Reporte individual del módulo aplicacion&#10;├── presentacion/target/site/jacoco/        # Reporte individual del módulo presentacion&#10;├── aplicacion/target/site/jacoco-aggregate/ # Reporte agregado desde aplicacion&#10;├── presentacion/target/site/jacoco-aggregate/ # Reporte agregado desde presentacion&#10;└── target/site/jacoco-aggregate/           # Reporte agregado principal&#10;```&#10;&#10;**Archivos importantes:**&#10;- `jacoco.xml` - Reporte en formato XML para SonarQube&#10;- `index.html` - Reporte visual HTML&#10;- `jacoco.exec` - Datos de ejecución binarios&#10;&#10;### Análisis con SonarQube&#10;&#10;#### 1. Configuración Inicial de SonarQube&#10;&#10;**Primera configuración:**&#10;```bash&#10;# Levantar SonarQube&#10;docker-compose up -d sonarqube&#10;&#10;# Esperar inicialización (2-3 minutos)&#10;docker-compose logs -f sonarqube&#10;&#10;# Acceder a la interfaz web&#10;# URL: http://localhost:9000&#10;# Usuario: admin&#10;# Contraseña: admin (cambiar en primer acceso)&#10;```&#10;&#10;#### 2. Configurar Proyecto en SonarQube&#10;&#10;1. **Crear nuevo proyecto:**&#10;   - Acceder a http://localhost:9000&#10;   - Click en &quot;Create Project&quot; → &quot;Manually&quot;&#10;   - Project key: `festivos-api`&#10;   - Display name: `API Festivos`&#10;&#10;2. **Generar token:**&#10;   - Click en &quot;Generate Token&quot;&#10;   - Nombre: `festivos-api-token`&#10;   - Copiar y guardar el token generado&#10;&#10;#### 3. Ejecutar Análisis de SonarQube&#10;&#10;**Con Maven local:**&#10;```bash&#10;cd apiFestivos&#10;&#10;# Ejecutar análisis completo con cobertura&#10;mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=TU_TOKEN_AQUI&#10;```&#10;&#10;**Con Docker:**&#10;```bash&#10;# Ejecutar análisis desde el contenedor&#10;docker-compose exec api-festivos mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#10;  -Dsonar.token=TU_TOKEN_AQUI&#10;```&#10;&#10;**Usando variables de entorno:**&#10;```bash&#10;# Configurar variables&#10;export SONAR_TOKEN=tu_token_aqui&#10;export SONAR_PROJECT_KEY=festivos-api&#10;&#10;# Ejecutar análisis&#10;mvn clean verify sonar:sonar \&#10;  -Dsonar.projectKey=$SONAR_PROJECT_KEY \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=$SONAR_TOKEN&#10;```&#10;&#10;#### 4. Interpretar Resultados&#10;&#10;**Métricas principales:**&#10;- **Coverage**: Porcentaje de código cubierto por pruebas&#10;- **Lines of Code**: Líneas de código analizadas&#10;- **Bugs**: Problemas que pueden causar errores&#10;- **Vulnerabilities**: Problemas de seguridad&#10;- **Code Smells**: Problemas de mantenibilidad&#10;- **Duplications**: Código duplicado&#10;&#10;**Acceder a resultados:**&#10;- Dashboard: http://localhost:9000/dashboard?id=festivos-api&#10;- Ver detalles por módulo, archivo y línea&#10;- Métricas históricas y tendencias&#10;&#10;### Integración Continua&#10;&#10;#### Script de Análisis Automatizado&#10;&#10;Crear archivo `scripts/analyze.sh`:&#10;```bash&#10;#!/bin/bash&#10;set -e&#10;&#10;echo &quot; Iniciando análisis de código...&quot;&#10;&#10;# Ejecutar pruebas con cobertura&#10;echo &quot; Ejecutando pruebas con cobertura...&quot;&#10;mvn clean verify&#10;&#10;# Verificar que los reportes existen&#10;echo &quot; Verificando reportes de cobertura...&quot;&#10;find . -name &quot;jacoco.xml&quot; -type f&#10;&#10;# Ejecutar análisis de SonarQube&#10;echo &quot; Ejecutando análisis de SonarQube...&quot;&#10;mvn sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#10;  -Dsonar.projectVersion=1.0 \&#10;  -Dsonar.host.url=http://localhost:9000 \&#10;  -Dsonar.token=${SONAR_TOKEN}&#10;&#10;echo &quot;✅ Análisis completado. Ver resultados en: http://localhost:9000&quot;&#10;```&#10;&#10;#### Makefile Actualizado&#10;&#10;```makefile&#10;# Análisis de código&#10;.PHONY: test-coverage sonar analyze&#10;&#10;test-coverage: ## Ejecutar pruebas con cobertura&#10;&#9;cd apiFestivos &amp;&amp; mvn clean verify&#10;&#10;sonar: ## Ejecutar análisis de SonarQube&#10;&#9;cd apiFestivos &amp;&amp; mvn sonar:sonar \&#10;&#9;&#9;-Dsonar.projectKey=festivos-api \&#10;&#9;&#9;-Dsonar.host.url=http://localhost:9000 \&#10;&#9;&#9;-Dsonar.token=${SONAR_TOKEN}&#10;&#10;analyze: test-coverage sonar ## Ejecutar análisis completo (pruebas + SonarQube)&#10;```&#10;&#10;### Solución de Problemas&#10;&#10;#### Cobertura en 0.0%&#10;&#10;Si SonarQube muestra 0% de cobertura:&#10;&#10;1. **Verificar reportes generados:**&#10;   ```bash&#10;   find apiFestivos -name &quot;jacoco.xml&quot; -type f&#10;   find apiFestivos -name &quot;jacoco.exec&quot; -type f&#10;   ```&#10;&#10;2. **Verificar configuración de rutas:**&#10;   ```bash&#10;   # Verificar en logs de SonarQube&#10;   grep -i &quot;jacoco&quot; apiFestivos/target/sonar/report-task.txt&#10;   ```&#10;&#10;3. **Regenerar reportes:**&#10;   ```bash&#10;   cd apiFestivos&#10;   mvn clean verify&#10;   mvn jacoco:report-aggregate&#10;   ```&#10;&#10;#### SonarQube no encuentra reportes&#10;&#10;1. **Verificar configuración en POM:**&#10;   ```xml&#10;   &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#10;       **/target/site/jacoco/jacoco.xml,&#10;       **/target/site/jacoco-aggregate/jacoco.xml&#10;   &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#10;   ```&#10;&#10;2. **Usar rutas absolutas:**&#10;   ```bash&#10;   mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco-aggregate/jacoco.xml&#10;   ```&#10;&#10;#### Problemas de Memoria&#10;&#10;Si SonarQube falla por memoria:&#10;```bash&#10;# Aumentar memoria de Docker&#10;# Docker Desktop → Settings → Resources → Memory: 4GB+&#10;&#10;# Verificar memoria disponible&#10;docker stats sonarqube&#10;```&#10;&#10;### Métricas de Calidad Recomendadas&#10;&#10;**Objetivos de cobertura:**&#10;- **Cobertura mínima**: 80%&#10;- **Cobertura objetivo**: 90%&#10;- **Cobertura crítica**: 95% (servicios core)&#10;&#10;**Umbrales de calidad:**&#10;- **Bugs**: 0&#10;- **Vulnerabilities**: 0&#10;- **Code Smells**: &lt; 10 por 1000 líneas&#10;- **Duplications**: &lt; 3%&#10;&#10;## Comandos Útiles&#10;&#10;### Usando Makefile (Linux/Mac/WSL)&#10;```bash&#10;make help        # Ver todos los comandos&#10;make build       # Construir imágenes&#10;make up          # Levantar servicios&#10;make down        # Detener servicios&#10;make test        # Ejecutar pruebas&#10;make test-coverage # Ejecutar pruebas con cobertura&#10;make sonar       # Análisis de SonarQube&#10;make analyze     # Análisis completo (pruebas + SonarQube)&#10;make logs        # Ver logs de la API&#10;make clean       # Limpiar todo&#10;```&#10;&#10;### Usando Docker Compose directamente&#10;```bash&#10;# Construir imágenes&#10;docker-compose build&#10;&#10;# Levantar servicios&#10;docker-compose up -d&#10;&#10;# Ver logs&#10;docker-compose logs -f api-festivos&#10;&#10;# Ejecutar pruebas con cobertura&#10;docker-compose exec api-festivos mvn clean verify&#10;&#10;# Ejecutar análisis de SonarQube&#10;docker-compose exec api-festivos mvn sonar:sonar \&#10;  -Dsonar.projectKey=festivos-api \&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#10;  -Dsonar.token=TU_TOKEN&#10;&#10;# Detener servicios&#10;docker-compose down&#10;&#10;# Limpiar volúmenes&#10;docker-compose down -v&#10;```&#10;&#10;## Endpoints de la API&#10;&#10;### Países&#10;- `GET /pais` - Listar todos los países&#10;- `GET /pais/{id}` - Obtener país por ID&#10;&#10;### Tipos de Festivo&#10;- `GET /tipo` - Listar todos los tipos&#10;- `GET /tipo/{id}` - Obtener tipo por ID&#10;&#10;### Festivos&#10;- `GET /festivo` - Listar todos los festivos&#10;- `GET /festivo/{id}` - Obtener festivo por ID&#10;- `GET /festivo/verificar/{año}/{mes}/{dia}` - Verificar si una fecha es festivo&#10;&#10;## Base de Datos&#10;&#10;### Conexión Local&#10;```&#10;Host: localhost&#10;Puerto: 5432&#10;Base de datos: festivos&#10;Usuario: postgres&#10;Contraseña: sa&#10;```&#10;&#10;### Estructura&#10;- **Tipo**: Tipos de festivos (Fijo, Ley Puente, etc.)&#10;- **Pais**: Países disponibles&#10;- **Festivo**: Festivos por país con reglas de cálculo&#10;&#10;## Troubleshooting&#10;&#10;### La API no se conecta a la base de datos&#10;```bash&#10;# Verificar que PostgreSQL esté ejecutándose&#10;docker-compose ps postgres&#10;&#10;# Ver logs de PostgreSQL&#10;docker-compose logs postgres&#10;&#10;# Reiniciar servicios&#10;docker-compose restart postgres api-festivos&#10;```&#10;&#10;### SonarQube no responde&#10;```bash&#10;# SonarQube necesita tiempo para inicializar&#10;docker-compose logs sonarqube&#10;&#10;# Verificar memoria disponible (SonarQube necesita ~2GB RAM)&#10;docker stats&#10;```&#10;&#10;### Limpiar y reiniciar todo&#10;```bash&#10;# Detener todo&#10;docker-compose down -v&#10;&#10;# Limpiar imágenes&#10;docker system prune -f&#10;&#10;# Reconstruir y levantar&#10;docker-compose build --no-cache&#10;docker-compose up -d&#10;```&#10;&#10;## Configuración de Desarrollo&#10;&#10;### Variables de Entorno&#10;Las siguientes variables se configuran automáticamente en Docker:&#10;&#10;```env&#10;SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/festivos&#10;SPRING_DATASOURCE_USERNAME=postgres&#10;SPRING_DATASOURCE_PASSWORD=sa&#10;SPRING_PROFILES_ACTIVE=docker&#10;```&#10;&#10;### Perfiles de Spring&#10;- `default`: Configuración local&#10;- `docker`: Configuración para contenedores&#10;&#10;## Monitoreo&#10;&#10;### Health Checks&#10;- API: http://localhost:8080/actuator/health&#10;- Base de datos: Verificación automática en Docker Compose&#10;&#10;### Logs&#10;```bash&#10;# Todos los servicios&#10;docker-compose logs&#10;&#10;# Solo la API&#10;docker-compose logs api-festivos&#10;&#10;# Seguir logs en tiempo real&#10;docker-compose logs -f&#10;```&#10;&#10;## CI/CD con AWS CodeBuild&#10;&#10;### Pipeline de Integración Continua&#10;&#10;El proyecto incluye un pipeline completo de CI/CD usando **AWS CodeBuild** que automatiza:&#10;&#10;- ✅ **Pruebas unitarias** con Maven&#10;- ✅ **Cobertura de código** con JaCoCo&#10;- ✅ **Construcción de imagen Docker**&#10;- ✅ **Push a Amazon ECR**&#10;- ✅ **Generación de artefactos** para deployment&#10;&#10;### Estructura del Pipeline&#10;&#10;```&#10;ci/&#10;└── buildspec-backend.yml    # Configuración de AWS CodeBuild&#10;```&#10;&#10;### Configuración del Buildspec&#10;&#10;#### Variables de Entorno Requeridas&#10;&#10;Configurar en **AWS CodeBuild Environment Variables**:&#10;&#10;```bash&#10;# Variables de ECR (requeridas)&#10;AWS_ACCOUNT_ID=123456789012&#10;AWS_DEFAULT_REGION=us-east-1&#10;IMAGE_REPO_NAME=festivos-api&#10;&#10;# Variables opcionales&#10;SONAR_HOST_URL=https://sonarcloud.io&#10;```&#10;&#10;#### Variables en AWS Parameter Store&#10;&#10;Para análisis de SonarQube (opcional):&#10;```bash&#10;/festivos-api/sonar/token = squ_1234567890abcdef...&#10;```&#10;&#10;### Fases del Pipeline&#10;&#10;####  **Install Phase**&#10;```yaml&#10;runtime-versions:&#10;  java: corretto17&#10;  docker: 20&#10;```&#10;- Instala Java 17 (Amazon Corretto)&#10;- Configura Docker 20&#10;- Verifica versiones de herramientas&#10;&#10;####  **Pre-build Phase**&#10;- **Genera IMAGE_TAG único**: `{commit-hash}-{timestamp}`&#10;  ```bash&#10;  # Ejemplo: a1b2c3d4-20250810-143022&#10;  IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:8}-$(date +%Y%m%d-%H%M%S)&#10;  ```&#10;- **Login automático a ECR**:&#10;  ```bash&#10;  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin&#10;  ```&#10;- Configura URIs dinámicamente&#10;&#10;#### ️ **Build Phase**&#10;1. **Ejecuta pruebas con cobertura**:&#10;   ```bash&#10;   mvn clean verify -B&#10;   ```&#10;&#10;2. **Genera artefactos**:&#10;   ```bash&#10;   mvn package -DskipTests&#10;   ```&#10;&#10;3. **Construye imagen Docker**:&#10;   ```bash&#10;   docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .&#10;   docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI&#10;   ```&#10;&#10;####  **Post-build Phase**&#10;1. **Push a Amazon ECR**:&#10;   ```bash&#10;   docker push $IMAGE_URI&#10;   docker push $REPOSITORY_URI:latest&#10;   ```&#10;&#10;2. **Genera `imagedefinitions.json`**:&#10;   ```json&#10;   [&#10;     {&#10;       &quot;name&quot;: &quot;festivos-api-container&quot;,&#10;       &quot;imageUri&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:a1b2c3d4-20250810-143022&quot;&#10;     }&#10;   ]&#10;   ```&#10;&#10;3. **Genera metadata del build**:&#10;   ```json&#10;   {&#10;     &quot;buildId&quot;: &quot;festivos-api:12345&quot;,&#10;     &quot;sourceVersion&quot;: &quot;a1b2c3d4...&quot;,&#10;     &quot;imageTag&quot;: &quot;a1b2c3d4-20250810-143022&quot;,&#10;     &quot;imageUri&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:a1b2c3d4-20250810-143022&quot;,&#10;     &quot;timestamp&quot;: &quot;2025-08-10T19:30:22Z&quot;&#10;   }&#10;   ```&#10;&#10;### Reportes y Artefactos&#10;&#10;#### Reportes Automáticos&#10;- **JUnit Tests**: `**/target/surefire-reports/TEST-*.xml`&#10;- **JaCoCo Coverage**: `**/target/site/jacoco/jacoco.xml`&#10;&#10;#### Artefactos Generados&#10;- `imagedefinitions.json` - Para ECS deployment&#10;- `build-metadata.json` - Metadata del build  &#10;- `target/site/jacoco-aggregate/**/*` - Reportes de cobertura&#10;&#10;#### Cache Optimizado&#10;```yaml&#10;cache:&#10;  paths:&#10;    - '/root/.m2/**/*'        # Dependencias Maven&#10;    - 'apiFestivos/target/**/*' # Artefactos compilados&#10;```&#10;&#10;### Configuración en AWS&#10;&#10;#### 1. Crear Repositorio ECR&#10;&#10;```bash&#10;# Crear repositorio&#10;aws ecr create-repository --repository-name festivos-api&#10;&#10;# Verificar repositorio&#10;aws ecr describe-repositories --repository-names festivos-api&#10;```&#10;&#10;#### 2. Configurar CodeBuild Project&#10;&#10;**Configuración básica**:&#10;- **Source**: GitHub/CodeCommit con `ci/buildspec-backend.yml`&#10;- **Environment**: &#10;  - Compute: `BUILD_GENERAL1_MEDIUM` (3 GB RAM, 2 vCPUs)&#10;  - Image: `aws/codebuild/amazonlinux2-x86_64-standard:5.0`&#10;  - Service role: Con permisos ECR y Parameter Store&#10;&#10;**Permisos IAM requeridos**:&#10;```json&#10;{&#10;  &quot;Version&quot;: &quot;2012-10-17&quot;,&#10;  &quot;Statement&quot;: [&#10;    {&#10;      &quot;Effect&quot;: &quot;Allow&quot;,&#10;      &quot;Action&quot;: [&#10;        &quot;ecr:BatchCheckLayerAvailability&quot;,&#10;        &quot;ecr:GetDownloadUrlForLayer&quot;,&#10;        &quot;ecr:BatchGetImage&quot;,&#10;        &quot;ecr:GetAuthorizationToken&quot;,&#10;        &quot;ecr:PutImage&quot;,&#10;        &quot;ecr:InitiateLayerUpload&quot;,&#10;        &quot;ecr:UploadLayerPart&quot;,&#10;        &quot;ecr:CompleteLayerUpload&quot;&#10;      ],&#10;      &quot;Resource&quot;: &quot;*&quot;&#10;    },&#10;    {&#10;      &quot;Effect&quot;: &quot;Allow&quot;,&#10;      &quot;Action&quot;: [&#10;        &quot;ssm:GetParameter&quot;,&#10;        &quot;ssm:GetParameters&quot;&#10;      ],&#10;      &quot;Resource&quot;: &quot;arn:aws:ssm:*:*:parameter/festivos-api/*&quot;&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;#### 3. Configurar Pipeline Completo&#10;&#10;**CodePipeline stages**:&#10;1. **Source**: GitHub/CodeCommit&#10;2. **Build**: CodeBuild (usa `buildspec-backend.yml`)&#10;3. **Deploy**: ECS usando `imagedefinitions.json`&#10;&#10;### Comandos de Desarrollo&#10;&#10;#### Simular Pipeline Localmente&#10;&#10;```bash&#10;# Simular build completo&#10;make aws-build&#10;&#10;# Ejecutar solo pruebas con cobertura&#10;make test-coverage&#10;&#10;# Análisis completo local&#10;make analyze&#10;```&#10;&#10;#### Verificar Configuración&#10;&#10;```bash&#10;# Verificar buildspec syntax&#10;aws codebuild batch-get-builds --ids &lt;build-id&gt;&#10;&#10;# Ver logs de build&#10;aws logs get-log-events --log-group-name /aws/codebuild/festivos-api&#10;&#10;# Verificar imágenes en ECR&#10;aws ecr list-images --repository-name festivos-api&#10;```&#10;&#10;### Integración con ECS&#10;&#10;#### Task Definition Ejemplo&#10;&#10;```json&#10;{&#10;  &quot;family&quot;: &quot;festivos-api-task&quot;,&#10;  &quot;networkMode&quot;: &quot;awsvpc&quot;,&#10;  &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#10;  &quot;cpu&quot;: &quot;256&quot;,&#10;  &quot;memory&quot;: &quot;512&quot;,&#10;  &quot;containerDefinitions&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;festivos-api-container&quot;,&#10;      &quot;image&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#10;      &quot;portMappings&quot;: [&#10;        {&#10;          &quot;containerPort&quot;: 8080,&#10;          &quot;protocol&quot;: &quot;tcp&quot;&#10;        }&#10;      ],&#10;      &quot;environment&quot;: [&#10;        {&#10;          &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#10;          &quot;value&quot;: &quot;aws&quot;&#10;        }&#10;      ],&#10;      &quot;logConfiguration&quot;: {&#10;        &quot;logDriver&quot;: &quot;awslogs&quot;,&#10;        &quot;options&quot;: {&#10;          &quot;awslogs-group&quot;: &quot;/ecs/festivos-api&quot;,&#10;          &quot;awslogs-region&quot;: &quot;us-east-1&quot;,&#10;          &quot;awslogs-stream-prefix&quot;: &quot;ecs&quot;&#10;        }&#10;      }&#10;    }&#10;  ]&#10;}&#10;```&#10;&#10;### Monitoreo del Pipeline&#10;&#10;#### CloudWatch Metrics&#10;- **Build Duration**: Tiempo de ejecución del build&#10;- **Build Success Rate**: Porcentaje de builds exitosos&#10;- **Test Results**: Resultados de pruebas unitarias&#10;&#10;#### Notificaciones&#10;Configurar SNS/Slack para notificar:&#10;- ✅ Build exitoso&#10;- ❌ Build fallido&#10;-  Reportes de cobertura&#10;&#10;### Mejores Prácticas&#10;&#10;#### Optimización de Performance&#10;- **Cache de dependencias Maven**: Reduce tiempo de build en ~60%&#10;- **Multi-stage builds**: Imágenes Docker más ligeras&#10;- **Parallel testing**: Ejecutar pruebas en paralelo&#10;&#10;#### Seguridad&#10;- **Secrets en Parameter Store**: No hardcodear tokens&#10;- **IAM roles específicos**: Principio de menor privilegio&#10;- **Scan de vulnerabilidades**: Integrar con Amazon Inspector&#10;&#10;#### Calidad de Código&#10;- **Gates de calidad**: Fallar build si cobertura &lt; 80%&#10;- **Análisis estático**: Integración con SonarQube/SonarCloud&#10;- **Pruebas de seguridad**: SAST/DAST automatizado&#10;&#10;### Troubleshooting Pipeline&#10;&#10;#### Build Falla en Tests&#10;```bash&#10;# Ver reportes detallados&#10;aws codebuild batch-get-build-batches --ids &lt;build-id&gt;&#10;&#10;# Descargar logs&#10;aws logs filter-log-events --log-group-name /aws/codebuild/festivos-api&#10;```&#10;&#10;#### Push a ECR Falla&#10;```bash&#10;# Verificar permisos&#10;aws ecr get-authorization-token&#10;&#10;# Verificar repositorio existe&#10;aws ecr describe-repositories --repository-names festivos-api&#10;```&#10;&#10;#### Imagen No Se Actualiza en ECS&#10;```bash&#10;# Verificar imagedefinitions.json&#10;cat imagedefinitions.json&#10;&#10;# Forzar deployment&#10;aws ecs update-service --cluster &lt;cluster&gt; --service &lt;service&gt; --force-new-deployment&#10;```&#10;&#10;## Migración a AWS RDS&#10;&#10;### Configuración para Producción en AWS&#10;&#10;Para el deployment en AWS, la API utiliza **Amazon RDS PostgreSQL** en lugar de la base de datos containerizada. Esto proporciona:&#10;&#10;- ✅ **Alta disponibilidad** y backup automático&#10;- ✅ **Escalabilidad** automática de storage&#10;- ✅ **Seguridad** con encryption y VPC isolation&#10;- ✅ **Monitoreo** con CloudWatch y Performance Insights&#10;&#10;### Estructura de Archivos AWS&#10;&#10;```&#10;infrastructure/&#10;├── rds-cloudformation.yml     # CloudFormation para RDS&#10;├── ecs-task-definition.json   # Task Definition para ECS&#10;└── ecs-task-definition-dev.json # Generado automáticamente&#10;&#10;scripts/&#10;└── deploy-aws.sh              # Script de deployment&#10;&#10;apiFestivos/presentacion/src/main/resources/&#10;└── application-aws.properties # Configuración para AWS&#10;```&#10;&#10;### Configuración de Spring Boot para AWS&#10;&#10;El perfil `aws` está configurado para conectarse a RDS:&#10;&#10;```properties&#10;# application-aws.properties&#10;spring.profiles.active=aws&#10;spring.datasource.url=${RDS_DB_URL}&#10;spring.datasource.username=${RDS_DB_USERNAME}&#10;spring.datasource.password=${RDS_DB_PASSWORD}&#10;&#10;# Pool de conexiones optimizado para RDS&#10;spring.datasource.hikari.maximum-pool-size=20&#10;spring.datasource.hikari.minimum-idle=5&#10;spring.datasource.hikari.connection-timeout=30000&#10;&#10;# SSL habilitado para RDS&#10;spring.datasource.hikari.data-source-properties.ssl=true&#10;spring.datasource.hikari.data-source-properties.sslmode=require&#10;```&#10;&#10;##  Proceso de Migración Simplificado&#10;&#10;### **Paso 1: Preparación**&#10;```bash&#10;# Instalar AWS CLI (si no está instalado)&#10;curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;&#10;unzip awscliv2.zip&#10;sudo ./aws/install&#10;&#10;# Configurar credenciales AWS&#10;aws configure&#10;# AWS Access Key ID: [Tu Access Key]&#10;# AWS Secret Access Key: [Tu Secret Key]&#10;# Default region name: us-east-1&#10;# Default output format: json&#10;```&#10;&#10;### **Paso 2: Ejecutar Script de Deployment**&#10;```bash&#10;# Hacer script ejecutable&#10;chmod +x scripts/deploy-aws.sh&#10;&#10;# Desplegar ambiente de desarrollo&#10;./scripts/deploy-aws.sh dev&#10;&#10;# Desplegar ambiente de producción&#10;./scripts/deploy-aws.sh prod&#10;```&#10;&#10;### **Paso 3: El Script Automatiza Todo**&#10;El script `deploy-aws.sh` realiza automáticamente:&#10;&#10;1. ✅ **Verifica credenciales AWS** y obtiene Account ID&#10;2. ✅ **Crea repositorio ECR** si no existe&#10;3. ✅ **Despliega stack RDS** usando CloudFormation&#10;4. ✅ **Configura Security Groups** y Secrets Manager&#10;5. ✅ **Ejecuta scripts DDL/DML** en la nueva base de datos&#10;6. ✅ **Genera Task Definition** con variables actualizadas&#10;7. ✅ **Crea CloudWatch Log Group** para ECS&#10;&#10;### **Paso 4: Variables Configuradas Automáticamente**&#10;El CloudFormation crea en **AWS Secrets Manager**:&#10;```json&#10;{&#10;  &quot;username&quot;: &quot;festivos_user&quot;,&#10;  &quot;password&quot;: &quot;tu_password_seguro&quot;,&#10;  &quot;host&quot;: &quot;festivos-rds.cluster-xxx.amazonaws.com&quot;,&#10;  &quot;port&quot;: 5432,&#10;  &quot;dbname&quot;: &quot;festivos&quot;,&#10;  &quot;url&quot;: &quot;jdbc:postgresql://festivos-rds.cluster-xxx.amazonaws.com:5432/festivos&quot;&#10;}&#10;```&#10;&#10;### **Paso 5: Configurar CodeBuild (Una sola vez)**&#10;En la consola de AWS CodeBuild, agregar estas variables de entorno:&#10;AWS_ACCOUNT_ID=123456789012          # Se obtiene automáticamente del script&#10;AWS_DEFAULT_REGION=us-east-1&#10;IMAGE_REPO_NAME=festivos-api&#10;### **Paso 6: ¡Listo para CI/CD!**&#10;Después del deployment inicial:&#10;- ✅ **RDS funcionando** con backup automático&#10;- ✅ **ECR repository** creado para imágenes Docker&#10;- ✅ **Secrets Manager** configurado con credenciales&#10;- ✅ **Task Definition** lista para ECS&#10;- ✅ **Pipeline CI/CD** puede comenzar a funcionar&#10;## Despliegue Inicial en AWS&#10;2. **Implementar HTTPS** con ACM + ALB&#10;3. **Setup de alertas** y dashboards&#10;4. **Backup strategy** para disaster recovery&#10;5. **Auto-scaling** basado en métricas&#10;" />
              <option name="updatedContent" value="# API de Festivos - Docker Setup&#13;&#10;&#13;&#10;Esta API gestiona festivos de diferentes países usando Spring Boot, PostgreSQL y análisis de código con SonarQube.&#13;&#10;&#13;&#10;## Arquitectura&#13;&#10;&#13;&#10;- **API**: Spring Boot con arquitectura hexagonal&#13;&#10;- **Base de Datos**: PostgreSQL 15&#13;&#10;- **Análisis de Código**: SonarQube Community&#13;&#10;- **Cobertura de Código**: JaCoCo&#13;&#10;- **Contenedores**: Docker &amp; Docker Compose&#13;&#10;&#13;&#10;## Prerequisitos&#13;&#10;&#13;&#10;- Docker Desktop&#13;&#10;- Docker Compose&#13;&#10;- Git&#13;&#10;&#13;&#10;## Estructura del Proyecto&#13;&#10;&#13;&#10;```&#13;&#10;├── apiFestivos/           # Código fuente de la API&#13;&#10;│   ├── dominio/          # Entidades y DTOs&#13;&#10;│   ├── core/             # Interfaces de servicios&#13;&#10;│   ├── aplicacion/       # Implementación de servicios&#13;&#10;│   ├── infraestructura/  # Repositorios&#13;&#10;│   ├── presentacion/     # Controladores y configuración&#13;&#10;│   └── Dockerfile        # Imagen Docker para la API&#13;&#10;├── bd/                   # Scripts de base de datos&#13;&#10;├── docker-compose.yml    # Configuración de servicios&#13;&#10;└── Makefile             # Comandos útiles&#13;&#10;```&#13;&#10;&#13;&#10;## Servicios Incluidos&#13;&#10;&#13;&#10;| Servicio | Puerto | Descripción |&#13;&#10;|----------|--------|-------------|&#13;&#10;| api-festivos | 8080 | API REST de festivos |&#13;&#10;| postgres | 5432 | Base de datos PostgreSQL |&#13;&#10;| sonarqube | 9000 | Análisis de calidad de código |&#13;&#10;&#13;&#10;## Inicio Rápido&#13;&#10;&#13;&#10;### 1. Clonar y navegar al proyecto&#13;&#10;```bash&#13;&#10;git clone &lt;repositorio&gt;&#13;&#10;cd TT_ANI_ProyectoFestivos&#13;&#10;```&#13;&#10;&#13;&#10;### 2. Levantar servicios base&#13;&#10;```bash&#13;&#10;docker-compose up -d postgres sonarqube&#13;&#10;```&#13;&#10;&#13;&#10;### 3. Esperar inicialización (30-60 segundos)&#13;&#10;```bash&#13;&#10;# Verificar que PostgreSQL esté listo&#13;&#10;docker-compose logs postgres&#13;&#10;&#13;&#10;# Verificar que SonarQube esté listo&#13;&#10;docker-compose logs sonarqube&#13;&#10;```&#13;&#10;&#13;&#10;### 4. Levantar la API&#13;&#10;```bash&#13;&#10;docker-compose up -d api-festivos&#13;&#10;```&#13;&#10;&#13;&#10;### 5. Verificar servicios&#13;&#10;```bash&#13;&#10;# Health check de la API&#13;&#10;curl http://localhost:8080/actuator/health&#13;&#10;&#13;&#10;# Acceder a SonarQube&#13;&#10;# http://localhost:9000 (admin/admin)&#13;&#10;```&#13;&#10;&#13;&#10;## Pruebas y Calidad de Código&#13;&#10;&#13;&#10;### Configuración de Cobertura de Código&#13;&#10;&#13;&#10;El proyecto está configurado con **JaCoCo** para generar reportes de cobertura en proyectos multi-módulo:&#13;&#10;&#13;&#10;#### Configuración en POM padre (`pom.xml`)&#13;&#10;```xml&#13;&#10;&lt;properties&gt;&#13;&#10;    &lt;jacoco.version&gt;0.8.10&lt;/jacoco.version&gt;&#13;&#10;    &lt;!-- Configuración para SonarQube multi-módulo --&gt;&#13;&#10;    &lt;sonar.java.coveragePlugin&gt;jacoco&lt;/sonar.java.coveragePlugin&gt;&#13;&#10;    &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#13;&#10;        **/target/site/jacoco/jacoco.xml,&#13;&#10;        **/target/site/jacoco-aggregate/jacoco.xml&#13;&#10;    &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#13;&#10;&lt;/properties&gt;&#13;&#10;&#13;&#10;&lt;build&gt;&#13;&#10;    &lt;plugins&gt;&#13;&#10;        &lt;plugin&gt;&#13;&#10;            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;${jacoco.version}&lt;/version&gt;&#13;&#10;            &lt;executions&gt;&#13;&#10;                &lt;execution&gt;&#13;&#10;                    &lt;id&gt;prepare-agent&lt;/id&gt;&#13;&#10;                    &lt;goals&gt;&#13;&#10;                        &lt;goal&gt;prepare-agent&lt;/goal&gt;&#13;&#10;                    &lt;/goals&gt;&#13;&#10;                &lt;/execution&gt;&#13;&#10;                &lt;execution&gt;&#13;&#10;                    &lt;id&gt;report&lt;/id&gt;&#13;&#10;                    &lt;phase&gt;test&lt;/phase&gt;&#13;&#10;                    &lt;goals&gt;&#13;&#10;                        &lt;goal&gt;report&lt;/goal&gt;&#13;&#10;                    &lt;/goals&gt;&#13;&#10;                &lt;/execution&gt;&#13;&#10;                &lt;execution&gt;&#13;&#10;                    &lt;id&gt;report-aggregate&lt;/id&gt;&#13;&#10;                    &lt;phase&gt;verify&lt;/phase&gt;&#13;&#10;                    &lt;goals&gt;&#13;&#10;                        &lt;goal&gt;report-aggregate&lt;/goal&gt;&#13;&#10;                    &lt;/goals&gt;&#13;&#10;                &lt;/execution&gt;&#13;&#10;            &lt;/executions&gt;&#13;&#10;        &lt;/plugin&gt;&#13;&#10;    &lt;/plugins&gt;&#13;&#10;&lt;/build&gt;&#13;&#10;```&#13;&#10;&#13;&#10;### Ejecutar Pruebas con Cobertura&#13;&#10;&#13;&#10;#### Opción 1: Maven Local&#13;&#10;```bash&#13;&#10;# Ejecutar todas las pruebas con cobertura&#13;&#10;cd apiFestivos&#13;&#10;mvn clean verify&#13;&#10;&#13;&#10;# Solo pruebas (sin agregación)&#13;&#10;mvn clean test&#13;&#10;&#13;&#10;# Generar reportes agregados de cobertura&#13;&#10;mvn clean verify jacoco:report-aggregate&#13;&#10;```&#13;&#10;&#13;&#10;#### Opción 2: Docker&#13;&#10;```bash&#13;&#10;# Ejecutar todas las pruebas&#13;&#10;docker-compose exec api-festivos mvn clean verify&#13;&#10;&#13;&#10;# Solo pruebas unitarias&#13;&#10;docker-compose exec api-festivos mvn test&#13;&#10;&#13;&#10;# Ver reportes de cobertura&#13;&#10;docker-compose exec api-festivos find . -name &quot;jacoco.xml&quot; -type f&#13;&#10;```&#13;&#10;&#13;&#10;### Ubicación de Reportes de Cobertura&#13;&#10;&#13;&#10;Los reportes se generan en las siguientes ubicaciones:&#13;&#10;&#13;&#10;```&#13;&#10;apiFestivos/&#13;&#10;├── aplicacion/target/site/jacoco/          # Reporte individual del módulo aplicacion&#13;&#10;├── presentacion/target/site/jacoco/        # Reporte individual del módulo presentacion&#13;&#10;├── aplicacion/target/site/jacoco-aggregate/ # Reporte agregado desde aplicacion&#13;&#10;├── presentacion/target/site/jacoco-aggregate/ # Reporte agregado desde presentacion&#13;&#10;└── target/site/jacoco-aggregate/           # Reporte agregado principal&#13;&#10;```&#13;&#10;&#13;&#10;**Archivos importantes:**&#13;&#10;- `jacoco.xml` - Reporte en formato XML para SonarQube&#13;&#10;- `index.html` - Reporte visual HTML&#13;&#10;- `jacoco.exec` - Datos de ejecución binarios&#13;&#10;&#13;&#10;### Análisis con SonarQube&#13;&#10;&#13;&#10;#### 1. Configuración Inicial de SonarQube&#13;&#10;&#13;&#10;**Primera configuración:**&#13;&#10;```bash&#13;&#10;# Levantar SonarQube&#13;&#10;docker-compose up -d sonarqube&#13;&#10;&#13;&#10;# Esperar inicialización (2-3 minutos)&#13;&#10;docker-compose logs -f sonarqube&#13;&#10;&#13;&#10;# Acceder a la interfaz web&#13;&#10;# URL: http://localhost:9000&#13;&#10;# Usuario: admin&#13;&#10;# Contraseña: admin (cambiar en primer acceso)&#13;&#10;```&#13;&#10;&#13;&#10;#### 2. Configurar Proyecto en SonarQube&#13;&#10;&#13;&#10;1. **Crear nuevo proyecto:**&#13;&#10;   - Acceder a http://localhost:9000&#13;&#10;   - Click en &quot;Create Project&quot; → &quot;Manually&quot;&#13;&#10;   - Project key: `festivos-api`&#13;&#10;   - Display name: `API Festivos`&#13;&#10;&#13;&#10;2. **Generar token:**&#13;&#10;   - Click en &quot;Generate Token&quot;&#13;&#10;   - Nombre: `festivos-api-token`&#13;&#10;   - Copiar y guardar el token generado&#13;&#10;&#13;&#10;#### 3. Ejecutar Análisis de SonarQube&#13;&#10;&#13;&#10;**Con Maven local:**&#13;&#10;```bash&#13;&#10;cd apiFestivos&#13;&#10;&#13;&#10;# Ejecutar análisis completo con cobertura&#13;&#10;mvn clean verify sonar:sonar \&#13;&#10;  -Dsonar.projectKey=festivos-api \&#13;&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#13;&#10;  -Dsonar.projectVersion=1.0 \&#13;&#10;  -Dsonar.host.url=http://localhost:9000 \&#13;&#10;  -Dsonar.token=TU_TOKEN_AQUI&#13;&#10;```&#13;&#10;&#13;&#10;**Con Docker:**&#13;&#10;```bash&#13;&#10;# Ejecutar análisis desde el contenedor&#13;&#10;docker-compose exec api-festivos mvn clean verify sonar:sonar \&#13;&#10;  -Dsonar.projectKey=festivos-api \&#13;&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#13;&#10;  -Dsonar.projectVersion=1.0 \&#13;&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#13;&#10;  -Dsonar.token=TU_TOKEN_AQUI&#13;&#10;```&#13;&#10;&#13;&#10;**Usando variables de entorno:**&#13;&#10;```bash&#13;&#10;# Configurar variables&#13;&#10;export SONAR_TOKEN=tu_token_aqui&#13;&#10;export SONAR_PROJECT_KEY=festivos-api&#13;&#10;&#13;&#10;# Ejecutar análisis&#13;&#10;mvn clean verify sonar:sonar \&#13;&#10;  -Dsonar.projectKey=$SONAR_PROJECT_KEY \&#13;&#10;  -Dsonar.host.url=http://localhost:9000 \&#13;&#10;  -Dsonar.token=$SONAR_TOKEN&#13;&#10;```&#13;&#10;&#13;&#10;#### 4. Interpretar Resultados&#13;&#10;&#13;&#10;**Métricas principales:**&#13;&#10;- **Coverage**: Porcentaje de código cubierto por pruebas&#13;&#10;- **Lines of Code**: Líneas de código analizadas&#13;&#10;- **Bugs**: Problemas que pueden causar errores&#13;&#10;- **Vulnerabilities**: Problemas de seguridad&#13;&#10;- **Code Smells**: Problemas de mantenibilidad&#13;&#10;- **Duplications**: Código duplicado&#13;&#10;&#13;&#10;**Acceder a resultados:**&#13;&#10;- Dashboard: http://localhost:9000/dashboard?id=festivos-api&#13;&#10;- Ver detalles por módulo, archivo y línea&#13;&#10;- Métricas históricas y tendencias&#13;&#10;&#13;&#10;### Integración Continua&#13;&#10;&#13;&#10;#### Script de Análisis Automatizado&#13;&#10;&#13;&#10;Crear archivo `scripts/analyze.sh`:&#13;&#10;```bash&#13;&#10;#!/bin/bash&#13;&#10;set -e&#13;&#10;&#13;&#10;echo &quot; Iniciando análisis de código...&quot;&#13;&#10;&#13;&#10;# Ejecutar pruebas con cobertura&#13;&#10;echo &quot; Ejecutando pruebas con cobertura...&quot;&#13;&#10;mvn clean verify&#13;&#10;&#13;&#10;# Verificar que los reportes existen&#13;&#10;echo &quot; Verificando reportes de cobertura...&quot;&#13;&#10;find . -name &quot;jacoco.xml&quot; -type f&#13;&#10;&#13;&#10;# Ejecutar análisis de SonarQube&#13;&#10;echo &quot; Ejecutando análisis de SonarQube...&quot;&#13;&#10;mvn sonar:sonar \&#13;&#10;  -Dsonar.projectKey=festivos-api \&#13;&#10;  -Dsonar.projectName=&quot;API Festivos&quot; \&#13;&#10;  -Dsonar.projectVersion=1.0 \&#13;&#10;  -Dsonar.host.url=http://localhost:9000 \&#13;&#10;  -Dsonar.token=${SONAR_TOKEN}&#13;&#10;&#13;&#10;echo &quot;✅ Análisis completado. Ver resultados en: http://localhost:9000&quot;&#13;&#10;```&#13;&#10;&#13;&#10;#### Makefile Actualizado&#13;&#10;&#13;&#10;```makefile&#13;&#10;# Análisis de código&#13;&#10;.PHONY: test-coverage sonar analyze&#13;&#10;&#13;&#10;test-coverage: ## Ejecutar pruebas con cobertura&#13;&#10;&#9;cd apiFestivos &amp;&amp; mvn clean verify&#13;&#10;&#13;&#10;sonar: ## Ejecutar análisis de SonarQube&#13;&#10;&#9;cd apiFestivos &amp;&amp; mvn sonar:sonar \&#13;&#10;&#9;&#9;-Dsonar.projectKey=festivos-api \&#13;&#10;&#9;&#9;-Dsonar.host.url=http://localhost:9000 \&#13;&#10;&#9;&#9;-Dsonar.token=${SONAR_TOKEN}&#13;&#10;&#13;&#10;analyze: test-coverage sonar ## Ejecutar análisis completo (pruebas + SonarQube)&#13;&#10;```&#13;&#10;&#13;&#10;### Solución de Problemas&#13;&#10;&#13;&#10;#### Cobertura en 0.0%&#13;&#10;&#13;&#10;Si SonarQube muestra 0% de cobertura:&#13;&#10;&#13;&#10;1. **Verificar reportes generados:**&#13;&#10;   ```bash&#13;&#10;   find apiFestivos -name &quot;jacoco.xml&quot; -type f&#13;&#10;   find apiFestivos -name &quot;jacoco.exec&quot; -type f&#13;&#10;   ```&#13;&#10;&#13;&#10;2. **Verificar configuración de rutas:**&#13;&#10;   ```bash&#13;&#10;   # Verificar en logs de SonarQube&#13;&#10;   grep -i &quot;jacoco&quot; apiFestivos/target/sonar/report-task.txt&#13;&#10;   ```&#13;&#10;&#13;&#10;3. **Regenerar reportes:**&#13;&#10;   ```bash&#13;&#10;   cd apiFestivos&#13;&#10;   mvn clean verify&#13;&#10;   mvn jacoco:report-aggregate&#13;&#10;   ```&#13;&#10;&#13;&#10;#### SonarQube no encuentra reportes&#13;&#10;&#13;&#10;1. **Verificar configuración en POM:**&#13;&#10;   ```xml&#13;&#10;   &lt;sonar.coverage.jacoco.xmlReportPaths&gt;&#13;&#10;       **/target/site/jacoco/jacoco.xml,&#13;&#10;       **/target/site/jacoco-aggregate/jacoco.xml&#13;&#10;   &lt;/sonar.coverage.jacoco.xmlReportPaths&gt;&#13;&#10;   ```&#13;&#10;&#13;&#10;2. **Usar rutas absolutas:**&#13;&#10;   ```bash&#13;&#10;   mvn sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco-aggregate/jacoco.xml&#13;&#10;   ```&#13;&#10;&#13;&#10;#### Problemas de Memoria&#13;&#10;&#13;&#10;Si SonarQube falla por memoria:&#13;&#10;```bash&#13;&#10;# Aumentar memoria de Docker&#13;&#10;# Docker Desktop → Settings → Resources → Memory: 4GB+&#13;&#10;&#13;&#10;# Verificar memoria disponible&#13;&#10;docker stats sonarqube&#13;&#10;```&#13;&#10;&#13;&#10;### Métricas de Calidad Recomendadas&#13;&#10;&#13;&#10;**Objetivos de cobertura:**&#13;&#10;- **Cobertura mínima**: 80%&#13;&#10;- **Cobertura objetivo**: 90%&#13;&#10;- **Cobertura crítica**: 95% (servicios core)&#13;&#10;&#13;&#10;**Umbrales de calidad:**&#13;&#10;- **Bugs**: 0&#13;&#10;- **Vulnerabilities**: 0&#13;&#10;- **Code Smells**: &lt; 10 por 1000 líneas&#13;&#10;- **Duplications**: &lt; 3%&#13;&#10;&#13;&#10;## Comandos Útiles&#13;&#10;&#13;&#10;### Usando Makefile (Linux/Mac/WSL)&#13;&#10;```bash&#13;&#10;make help        # Ver todos los comandos&#13;&#10;make build       # Construir imágenes&#13;&#10;make up          # Levantar servicios&#13;&#10;make down        # Detener servicios&#13;&#10;make test        # Ejecutar pruebas&#13;&#10;make test-coverage # Ejecutar pruebas con cobertura&#13;&#10;make sonar       # Análisis de SonarQube&#13;&#10;make analyze     # Análisis completo (pruebas + SonarQube)&#13;&#10;make logs        # Ver logs de la API&#13;&#10;make clean       # Limpiar todo&#13;&#10;```&#13;&#10;&#13;&#10;### Usando Docker Compose directamente&#13;&#10;```bash&#13;&#10;# Construir imágenes&#13;&#10;docker-compose build&#13;&#10;&#13;&#10;# Levantar servicios&#13;&#10;docker-compose up -d&#13;&#10;&#13;&#10;# Ver logs&#13;&#10;docker-compose logs -f api-festivos&#13;&#10;&#13;&#10;# Ejecutar pruebas con cobertura&#13;&#10;docker-compose exec api-festivos mvn clean verify&#13;&#10;&#13;&#10;# Ejecutar análisis de SonarQube&#13;&#10;docker-compose exec api-festivos mvn sonar:sonar \&#13;&#10;  -Dsonar.projectKey=festivos-api \&#13;&#10;  -Dsonar.host.url=http://sonarqube:9000 \&#13;&#10;  -Dsonar.token=TU_TOKEN&#13;&#10;&#13;&#10;# Detener servicios&#13;&#10;docker-compose down&#13;&#10;&#13;&#10;# Limpiar volúmenes&#13;&#10;docker-compose down -v&#13;&#10;```&#13;&#10;&#13;&#10;## Endpoints de la API&#13;&#10;&#13;&#10;### Países&#13;&#10;- `GET /pais` - Listar todos los países&#13;&#10;- `GET /pais/{id}` - Obtener país por ID&#13;&#10;&#13;&#10;### Tipos de Festivo&#13;&#10;- `GET /tipo` - Listar todos los tipos&#13;&#10;- `GET /tipo/{id}` - Obtener tipo por ID&#13;&#10;&#13;&#10;### Festivos&#13;&#10;- `GET /festivo` - Listar todos los festivos&#13;&#10;- `GET /festivo/{id}` - Obtener festivo por ID&#13;&#10;- `GET /festivo/verificar/{año}/{mes}/{dia}` - Verificar si una fecha es festivo&#13;&#10;&#13;&#10;## Base de Datos&#13;&#10;&#13;&#10;### Conexión Local&#13;&#10;```&#13;&#10;Host: localhost&#13;&#10;Puerto: 5432&#13;&#10;Base de datos: festivos&#13;&#10;Usuario: postgres&#13;&#10;Contraseña: sa&#13;&#10;```&#13;&#10;&#13;&#10;### Estructura&#13;&#10;- **Tipo**: Tipos de festivos (Fijo, Ley Puente, etc.)&#13;&#10;- **Pais**: Países disponibles&#13;&#10;- **Festivo**: Festivos por país con reglas de cálculo&#13;&#10;&#13;&#10;## Troubleshooting&#13;&#10;&#13;&#10;### La API no se conecta a la base de datos&#13;&#10;```bash&#13;&#10;# Verificar que PostgreSQL esté ejecutándose&#13;&#10;docker-compose ps postgres&#13;&#10;&#13;&#10;# Ver logs de PostgreSQL&#13;&#10;docker-compose logs postgres&#13;&#10;&#13;&#10;# Reiniciar servicios&#13;&#10;docker-compose restart postgres api-festivos&#13;&#10;```&#13;&#10;&#13;&#10;### SonarQube no responde&#13;&#10;```bash&#13;&#10;# SonarQube necesita tiempo para inicializar&#13;&#10;docker-compose logs sonarqube&#13;&#10;&#13;&#10;# Verificar memoria disponible (SonarQube necesita ~2GB RAM)&#13;&#10;docker stats&#13;&#10;```&#13;&#10;&#13;&#10;### Limpiar y reiniciar todo&#13;&#10;```bash&#13;&#10;# Detener todo&#13;&#10;docker-compose down -v&#13;&#10;&#13;&#10;# Limpiar imágenes&#13;&#10;docker system prune -f&#13;&#10;&#13;&#10;# Reconstruir y levantar&#13;&#10;docker-compose build --no-cache&#13;&#10;docker-compose up -d&#13;&#10;```&#13;&#10;&#13;&#10;## Configuración de Desarrollo&#13;&#10;&#13;&#10;### Variables de Entorno&#13;&#10;Las siguientes variables se configuran automáticamente en Docker:&#13;&#10;&#13;&#10;```env&#13;&#10;SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/festivos&#13;&#10;SPRING_DATASOURCE_USERNAME=postgres&#13;&#10;SPRING_DATASOURCE_PASSWORD=sa&#13;&#10;SPRING_PROFILES_ACTIVE=docker&#13;&#10;```&#13;&#10;&#13;&#10;### Perfiles de Spring&#13;&#10;- `default`: Configuración local&#13;&#10;- `docker`: Configuración para contenedores&#13;&#10;&#13;&#10;## Monitoreo&#13;&#10;&#13;&#10;### Health Checks&#13;&#10;- API: http://localhost:8080/actuator/health&#13;&#10;- Base de datos: Verificación automática en Docker Compose&#13;&#10;&#13;&#10;### Logs&#13;&#10;```bash&#13;&#10;# Todos los servicios&#13;&#10;docker-compose logs&#13;&#10;&#13;&#10;# Solo la API&#13;&#10;docker-compose logs api-festivos&#13;&#10;&#13;&#10;# Seguir logs en tiempo real&#13;&#10;docker-compose logs -f&#13;&#10;```&#13;&#10;&#13;&#10;## CI/CD con AWS CodeBuild&#13;&#10;&#13;&#10;### Pipeline de Integración Continua&#13;&#10;&#13;&#10;El proyecto incluye un pipeline completo de CI/CD usando **AWS CodeBuild** que automatiza:&#13;&#10;&#13;&#10;- ✅ **Pruebas unitarias** con Maven&#13;&#10;- ✅ **Cobertura de código** con JaCoCo&#13;&#10;- ✅ **Construcción de imagen Docker**&#13;&#10;- ✅ **Push a Amazon ECR**&#13;&#10;- ✅ **Generación de artefactos** para deployment&#13;&#10;&#13;&#10;### Estructura del Pipeline&#13;&#10;&#13;&#10;```&#13;&#10;ci/&#13;&#10;└── buildspec-backend.yml    # Configuración de AWS CodeBuild&#13;&#10;```&#13;&#10;&#13;&#10;### Configuración del Buildspec&#13;&#10;&#13;&#10;#### Variables de Entorno Requeridas&#13;&#10;&#13;&#10;Configurar en **AWS CodeBuild Environment Variables**:&#13;&#10;&#13;&#10;```bash&#13;&#10;# Variables de ECR (requeridas)&#13;&#10;AWS_ACCOUNT_ID=123456789012&#13;&#10;AWS_DEFAULT_REGION=us-east-1&#13;&#10;IMAGE_REPO_NAME=festivos-api&#13;&#10;&#13;&#10;# Variables opcionales&#13;&#10;SONAR_HOST_URL=https://sonarcloud.io&#13;&#10;```&#13;&#10;&#13;&#10;#### Variables en AWS Parameter Store&#13;&#10;&#13;&#10;Para análisis de SonarQube (opcional):&#13;&#10;```bash&#13;&#10;/festivos-api/sonar/token = squ_1234567890abcdef...&#13;&#10;```&#13;&#10;&#13;&#10;### Fases del Pipeline&#13;&#10;&#13;&#10;####  **Install Phase**&#13;&#10;```yaml&#13;&#10;runtime-versions:&#13;&#10;  java: corretto17&#13;&#10;  docker: 20&#13;&#10;```&#13;&#10;- Instala Java 17 (Amazon Corretto)&#13;&#10;- Configura Docker 20&#13;&#10;- Verifica versiones de herramientas&#13;&#10;&#13;&#10;####  **Pre-build Phase**&#13;&#10;- **Genera IMAGE_TAG único**: `{commit-hash}-{timestamp}`&#13;&#10;  ```bash&#13;&#10;  # Ejemplo: a1b2c3d4-20250810-143022&#13;&#10;  IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:8}-$(date +%Y%m%d-%H%M%S)&#13;&#10;  ```&#13;&#10;- **Login automático a ECR**:&#13;&#10;  ```bash&#13;&#10;  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin&#13;&#10;  ```&#13;&#10;- Configura URIs dinámicamente&#13;&#10;&#13;&#10;#### ️ **Build Phase**&#13;&#10;1. **Ejecuta pruebas con cobertura**:&#13;&#10;   ```bash&#13;&#10;   mvn clean verify -B&#13;&#10;   ```&#13;&#10;&#13;&#10;2. **Genera artefactos**:&#13;&#10;   ```bash&#13;&#10;   mvn package -DskipTests&#13;&#10;   ```&#13;&#10;&#13;&#10;3. **Construye imagen Docker**:&#13;&#10;   ```bash&#13;&#10;   docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .&#13;&#10;   docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_URI&#13;&#10;   ```&#13;&#10;&#13;&#10;####  **Post-build Phase**&#13;&#10;1. **Push a Amazon ECR**:&#13;&#10;   ```bash&#13;&#10;   docker push $IMAGE_URI&#13;&#10;   docker push $REPOSITORY_URI:latest&#13;&#10;   ```&#13;&#10;&#13;&#10;2. **Genera `imagedefinitions.json`**:&#13;&#10;   ```json&#13;&#10;   [&#13;&#10;     {&#13;&#10;       &quot;name&quot;: &quot;festivos-api-container&quot;,&#13;&#10;       &quot;imageUri&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:a1b2c3d4-20250810-143022&quot;&#13;&#10;     }&#13;&#10;   ]&#13;&#10;   ```&#13;&#10;&#13;&#10;3. **Genera metadata del build**:&#13;&#10;   ```json&#13;&#10;   {&#13;&#10;     &quot;buildId&quot;: &quot;festivos-api:12345&quot;,&#13;&#10;     &quot;sourceVersion&quot;: &quot;a1b2c3d4...&quot;,&#13;&#10;     &quot;imageTag&quot;: &quot;a1b2c3d4-20250810-143022&quot;,&#13;&#10;     &quot;imageUri&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:a1b2c3d4-20250810-143022&quot;,&#13;&#10;     &quot;timestamp&quot;: &quot;2025-08-10T19:30:22Z&quot;&#13;&#10;   }&#13;&#10;   ```&#13;&#10;&#13;&#10;### Reportes y Artefactos&#13;&#10;&#13;&#10;#### Reportes Automáticos&#13;&#10;- **JUnit Tests**: `**/target/surefire-reports/TEST-*.xml`&#13;&#10;- **JaCoCo Coverage**: `**/target/site/jacoco/jacoco.xml`&#13;&#10;&#13;&#10;#### Artefactos Generados&#13;&#10;- `imagedefinitions.json` - Para ECS deployment&#13;&#10;- `build-metadata.json` - Metadata del build  &#13;&#10;- `target/site/jacoco-aggregate/**/*` - Reportes de cobertura&#13;&#10;&#13;&#10;#### Cache Optimizado&#13;&#10;```yaml&#13;&#10;cache:&#13;&#10;  paths:&#13;&#10;    - '/root/.m2/**/*'        # Dependencias Maven&#13;&#10;    - 'apiFestivos/target/**/*' # Artefactos compilados&#13;&#10;```&#13;&#10;&#13;&#10;### Configuración en AWS&#13;&#10;&#13;&#10;#### 1. Crear Repositorio ECR&#13;&#10;&#13;&#10;```bash&#13;&#10;# Crear repositorio&#13;&#10;aws ecr create-repository --repository-name festivos-api&#13;&#10;&#13;&#10;# Verificar repositorio&#13;&#10;aws ecr describe-repositories --repository-names festivos-api&#13;&#10;```&#13;&#10;&#13;&#10;#### 2. Configurar CodeBuild Project&#13;&#10;&#13;&#10;**Configuración básica**:&#13;&#10;- **Source**: GitHub/CodeCommit con `ci/buildspec-backend.yml`&#13;&#10;- **Environment**: &#13;&#10;  - Compute: `BUILD_GENERAL1_MEDIUM` (3 GB RAM, 2 vCPUs)&#13;&#10;  - Image: `aws/codebuild/amazonlinux2-x86_64-standard:5.0`&#13;&#10;  - Service role: Con permisos ECR y Parameter Store&#13;&#10;&#13;&#10;**Permisos IAM requeridos**:&#13;&#10;```json&#13;&#10;{&#13;&#10;  &quot;Version&quot;: &quot;2012-10-17&quot;,&#13;&#10;  &quot;Statement&quot;: [&#13;&#10;    {&#13;&#10;      &quot;Effect&quot;: &quot;Allow&quot;,&#13;&#10;      &quot;Action&quot;: [&#13;&#10;        &quot;ecr:BatchCheckLayerAvailability&quot;,&#13;&#10;        &quot;ecr:GetDownloadUrlForLayer&quot;,&#13;&#10;        &quot;ecr:BatchGetImage&quot;,&#13;&#10;        &quot;ecr:GetAuthorizationToken&quot;,&#13;&#10;        &quot;ecr:PutImage&quot;,&#13;&#10;        &quot;ecr:InitiateLayerUpload&quot;,&#13;&#10;        &quot;ecr:UploadLayerPart&quot;,&#13;&#10;        &quot;ecr:CompleteLayerUpload&quot;&#13;&#10;      ],&#13;&#10;      &quot;Resource&quot;: &quot;*&quot;&#13;&#10;    },&#13;&#10;    {&#13;&#10;      &quot;Effect&quot;: &quot;Allow&quot;,&#13;&#10;      &quot;Action&quot;: [&#13;&#10;        &quot;ssm:GetParameter&quot;,&#13;&#10;        &quot;ssm:GetParameters&quot;&#13;&#10;      ],&#13;&#10;      &quot;Resource&quot;: &quot;arn:aws:ssm:*:*:parameter/festivos-api/*&quot;&#13;&#10;    }&#13;&#10;  ]&#13;&#10;}&#13;&#10;```&#13;&#10;&#13;&#10;#### 3. Configurar Pipeline Completo&#13;&#10;&#13;&#10;**CodePipeline stages**:&#13;&#10;1. **Source**: GitHub/CodeCommit&#13;&#10;2. **Build**: CodeBuild (usa `buildspec-backend.yml`)&#13;&#10;3. **Deploy**: ECS usando `imagedefinitions.json`&#13;&#10;&#13;&#10;### Comandos de Desarrollo&#13;&#10;&#13;&#10;#### Simular Pipeline Localmente&#13;&#10;&#13;&#10;```bash&#13;&#10;# Simular build completo&#13;&#10;make aws-build&#13;&#10;&#13;&#10;# Ejecutar solo pruebas con cobertura&#13;&#10;make test-coverage&#13;&#10;&#13;&#10;# Análisis completo local&#13;&#10;make analyze&#13;&#10;```&#13;&#10;&#13;&#10;#### Verificar Configuración&#13;&#10;&#13;&#10;```bash&#13;&#10;# Verificar buildspec syntax&#13;&#10;aws codebuild batch-get-builds --ids &lt;build-id&gt;&#13;&#10;&#13;&#10;# Ver logs de build&#13;&#10;aws logs get-log-events --log-group-name /aws/codebuild/festivos-api&#13;&#10;&#13;&#10;# Verificar imágenes en ECR&#13;&#10;aws ecr list-images --repository-name festivos-api&#13;&#10;```&#13;&#10;&#13;&#10;### Integración con ECS&#13;&#10;&#13;&#10;#### Task Definition Ejemplo&#13;&#10;&#13;&#10;```json&#13;&#10;{&#13;&#10;  &quot;family&quot;: &quot;festivos-api-task&quot;,&#13;&#10;  &quot;networkMode&quot;: &quot;awsvpc&quot;,&#13;&#10;  &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#13;&#10;  &quot;cpu&quot;: &quot;256&quot;,&#13;&#10;  &quot;memory&quot;: &quot;512&quot;,&#13;&#10;  &quot;containerDefinitions&quot;: [&#13;&#10;    {&#13;&#10;      &quot;name&quot;: &quot;festivos-api-container&quot;,&#13;&#10;      &quot;image&quot;: &quot;123456789012.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#13;&#10;      &quot;portMappings&quot;: [&#13;&#10;        {&#13;&#10;          &quot;containerPort&quot;: 8080,&#13;&#10;          &quot;protocol&quot;: &quot;tcp&quot;&#13;&#10;        }&#13;&#10;      ],&#13;&#10;      &quot;environment&quot;: [&#13;&#10;        {&#13;&#10;          &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#13;&#10;          &quot;value&quot;: &quot;aws&quot;&#13;&#10;        }&#13;&#10;      ],&#13;&#10;      &quot;logConfiguration&quot;: {&#13;&#10;        &quot;logDriver&quot;: &quot;awslogs&quot;,&#13;&#10;        &quot;options&quot;: {&#13;&#10;          &quot;awslogs-group&quot;: &quot;/ecs/festivos-api&quot;,&#13;&#10;          &quot;awslogs-region&quot;: &quot;us-east-1&quot;,&#13;&#10;          &quot;awslogs-stream-prefix&quot;: &quot;ecs&quot;&#13;&#10;        }&#13;&#10;      }&#13;&#10;    }&#13;&#10;  ]&#13;&#10;}&#13;&#10;```&#13;&#10;&#13;&#10;### Monitoreo del Pipeline&#13;&#10;&#13;&#10;#### CloudWatch Metrics&#13;&#10;- **Build Duration**: Tiempo de ejecución del build&#13;&#10;- **Build Success Rate**: Porcentaje de builds exitosos&#13;&#10;- **Test Results**: Resultados de pruebas unitarias&#13;&#10;&#13;&#10;#### Notificaciones&#13;&#10;Configurar SNS/Slack para notificar:&#13;&#10;- ✅ Build exitoso&#13;&#10;- ❌ Build fallido&#13;&#10;-  Reportes de cobertura&#13;&#10;&#13;&#10;### Mejores Prácticas&#13;&#10;&#13;&#10;#### Optimización de Performance&#13;&#10;- **Cache de dependencias Maven**: Reduce tiempo de build en ~60%&#13;&#10;- **Multi-stage builds**: Imágenes Docker más ligeras&#13;&#10;- **Parallel testing**: Ejecutar pruebas en paralelo&#13;&#10;&#13;&#10;#### Seguridad&#13;&#10;- **Secrets en Parameter Store**: No hardcodear tokens&#13;&#10;- **IAM roles específicos**: Principio de menor privilegio&#13;&#10;- **Scan de vulnerabilidades**: Integrar con Amazon Inspector&#13;&#10;&#13;&#10;#### Calidad de Código&#13;&#10;- **Gates de calidad**: Fallar build si cobertura &lt; 80%&#13;&#10;- **Análisis estático**: Integración con SonarQube/SonarCloud&#13;&#10;- **Pruebas de seguridad**: SAST/DAST automatizado&#13;&#10;&#13;&#10;### Troubleshooting Pipeline&#13;&#10;&#13;&#10;#### Build Falla en Tests&#13;&#10;```bash&#13;&#10;# Ver reportes detallados&#13;&#10;aws codebuild batch-get-build-batches --ids &lt;build-id&gt;&#13;&#10;&#13;&#10;# Descargar logs&#13;&#10;aws logs filter-log-events --log-group-name /aws/codebuild/festivos-api&#13;&#10;```&#13;&#10;&#13;&#10;#### Push a ECR Falla&#13;&#10;```bash&#13;&#10;# Verificar permisos&#13;&#10;aws ecr get-authorization-token&#13;&#10;&#13;&#10;# Verificar repositorio existe&#13;&#10;aws ecr describe-repositories --repository-names festivos-api&#13;&#10;```&#13;&#10;&#13;&#10;#### Imagen No Se Actualiza en ECS&#13;&#10;```bash&#13;&#10;# Verificar imagedefinitions.json&#13;&#10;cat imagedefinitions.json&#13;&#10;&#13;&#10;# Forzar deployment&#13;&#10;aws ecs update-service --cluster &lt;cluster&gt; --service &lt;service&gt; --force-new-deployment&#13;&#10;```&#13;&#10;&#13;&#10;## Migración a AWS RDS&#13;&#10;&#13;&#10;### Configuración para Producción en AWS&#13;&#10;&#13;&#10;Para el deployment en AWS, la API utiliza **Amazon RDS PostgreSQL** en lugar de la base de datos containerizada. Esto proporciona:&#13;&#10;&#13;&#10;- ✅ **Alta disponibilidad** y backup automático&#13;&#10;- ✅ **Escalabilidad** automática de storage&#13;&#10;- ✅ **Seguridad** con encryption y VPC isolation&#13;&#10;- ✅ **Monitoreo** con CloudWatch y Performance Insights&#13;&#10;&#13;&#10;### Estructura de Archivos AWS&#13;&#10;&#13;&#10;```&#13;&#10;infrastructure/&#13;&#10;├── rds-cloudformation.yml     # CloudFormation para RDS&#13;&#10;├── ecs-task-definition.json   # Task Definition para ECS&#13;&#10;└── ecs-task-definition-dev.json # Generado automáticamente&#13;&#10;&#13;&#10;scripts/&#13;&#10;└── deploy-aws.sh              # Script de deployment&#13;&#10;&#13;&#10;apiFestivos/presentacion/src/main/resources/&#13;&#10;└── application-aws.properties # Configuración para AWS&#13;&#10;```&#13;&#10;&#13;&#10;### Configuración de Spring Boot para AWS&#13;&#10;&#13;&#10;El perfil `aws` está configurado para conectarse a RDS:&#13;&#10;&#13;&#10;```properties&#13;&#10;# application-aws.properties&#13;&#10;spring.profiles.active=aws&#13;&#10;spring.datasource.url=${RDS_DB_URL}&#13;&#10;spring.datasource.username=${RDS_DB_USERNAME}&#13;&#10;spring.datasource.password=${RDS_DB_PASSWORD}&#13;&#10;&#13;&#10;# Pool de conexiones optimizado para RDS&#13;&#10;spring.datasource.hikari.maximum-pool-size=20&#13;&#10;spring.datasource.hikari.minimum-idle=5&#13;&#10;spring.datasource.hikari.connection-timeout=30000&#13;&#10;&#13;&#10;# SSL habilitado para RDS&#13;&#10;spring.datasource.hikari.data-source-properties.ssl=true&#13;&#10;spring.datasource.hikari.data-source-properties.sslmode=require&#13;&#10;```&#13;&#10;&#13;&#10;##  Proceso de Migración Simplificado&#13;&#10;&#13;&#10;### **Paso 1: Preparación**&#13;&#10;```bash&#13;&#10;# Instalar AWS CLI (si no está instalado)&#13;&#10;curl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;&#13;&#10;unzip awscliv2.zip&#13;&#10;sudo ./aws/install&#13;&#10;&#13;&#10;# Configurar credenciales AWS&#13;&#10;aws configure&#13;&#10;# AWS Access Key ID: [Tu Access Key]&#13;&#10;# AWS Secret Access Key: [Tu Secret Key]&#13;&#10;# Default region name: us-east-1&#13;&#10;# Default output format: json&#13;&#10;```&#13;&#10;&#13;&#10;### **Paso 2: Ejecutar Script de Deployment**&#13;&#10;```bash&#13;&#10;# Hacer script ejecutable&#13;&#10;chmod +x scripts/deploy-aws.sh&#13;&#10;&#13;&#10;# Desplegar ambiente de desarrollo&#13;&#10;./scripts/deploy-aws.sh dev&#13;&#10;&#13;&#10;# Desplegar ambiente de producción&#13;&#10;./scripts/deploy-aws.sh prod&#13;&#10;```&#13;&#10;&#13;&#10;### **Paso 3: El Script Automatiza Todo**&#13;&#10;El script `deploy-aws.sh` realiza automáticamente:&#13;&#10;&#13;&#10;1. ✅ **Verifica credenciales AWS** y obtiene Account ID&#13;&#10;2. ✅ **Crea repositorio ECR** si no existe&#13;&#10;3. ✅ **Despliega stack RDS** usando CloudFormation&#13;&#10;4. ✅ **Configura Security Groups** y Secrets Manager&#13;&#10;5. ✅ **Ejecuta scripts DDL/DML** en la nueva base de datos&#13;&#10;6. ✅ **Genera Task Definition** con variables actualizadas&#13;&#10;7. ✅ **Crea CloudWatch Log Group** para ECS&#13;&#10;&#13;&#10;### **Paso 4: Variables Configuradas Automáticamente**&#13;&#10;El CloudFormation crea en **AWS Secrets Manager**:&#13;&#10;```json&#13;&#10;{&#13;&#10;  &quot;username&quot;: &quot;festivos_user&quot;,&#13;&#10;  &quot;password&quot;: &quot;tu_password_seguro&quot;,&#13;&#10;  &quot;host&quot;: &quot;festivos-rds.cluster-xxx.amazonaws.com&quot;,&#13;&#10;  &quot;port&quot;: 5432,&#13;&#10;  &quot;dbname&quot;: &quot;festivos&quot;,&#13;&#10;  &quot;url&quot;: &quot;jdbc:postgresql://festivos-rds.cluster-xxx.amazonaws.com:5432/festivos&quot;&#13;&#10;}&#13;&#10;```&#13;&#10;&#13;&#10;### **Paso 5: Configurar CodeBuild (Una sola vez)**&#13;&#10;En la consola de AWS CodeBuild, agregar estas variables de entorno:&#13;&#10;AWS_ACCOUNT_ID=123456789012          # Se obtiene automáticamente del script&#13;&#10;AWS_DEFAULT_REGION=us-east-1&#13;&#10;IMAGE_REPO_NAME=festivos-api&#13;&#10;### **Paso 6: ¡Listo para CI/CD!**&#13;&#10;Después del deployment inicial:&#13;&#10;- ✅ **RDS funcionando** con backup automático&#13;&#10;- ✅ **ECR repository** creado para imágenes Docker&#13;&#10;- ✅ **Secrets Manager** configurado con credenciales&#13;&#10;- ✅ **Task Definition** lista para ECS&#13;&#10;- ✅ **Pipeline CI/CD** puede comenzar a funcionar&#13;&#10;&#13;&#10;## API Festivos - Despliegue en AWS (Free Tier)&#13;&#10;&#13;&#10;Este proyecto permite desplegar una API de festivos en AWS utilizando únicamente servicios incluidos en el Free Tier. El despliegue crea una base de datos PostgreSQL en RDS, una imagen Docker en ECR y la API en ECS Fargate.&#13;&#10;&#13;&#10;## Requisitos previos&#13;&#10;&#13;&#10;- Cuenta AWS con Free Tier disponible&#13;&#10;- AWS CLI configurado (`aws configure`)&#13;&#10;- Docker instalado&#13;&#10;- Maven instalado&#13;&#10;- Acceso a la terminal/bash&#13;&#10;&#13;&#10;## Estructura de scripts&#13;&#10;&#13;&#10;- `scripts/deploy-aws.sh`: Despliega RDS + ECS (automatizado, recomendado)&#13;&#10;- `scripts/deploy-ecs-manual.sh`: Despliega solo ECS (requiere RDS existente)&#13;&#10;&#13;&#10;## Despliegue completo (RDS + ECS)&#13;&#10;&#13;&#10;1. **Clona el repositorio y accede al directorio raíz**&#13;&#10;   ```bash&#13;&#10;   git clone &lt;repo-url&gt;&#13;&#10;   cd TT_ANI_ProyectoFestivos&#13;&#10;   ```&#13;&#10;&#13;&#10;2. **Configura tus credenciales AWS**&#13;&#10;   ```bash&#13;&#10;   aws configure&#13;&#10;   ```&#13;&#10;&#13;&#10;3. **Ejecuta el script de despliegue**&#13;&#10;   ```bash&#13;&#10;   ./scripts/deploy-aws.sh [dev|staging|prod]&#13;&#10;   ```&#13;&#10;   - Si omites el parámetro, se usará `dev` por defecto.&#13;&#10;   - Ingresa la contraseña para la base de datos PostgreSQL cuando se solicite (mínimo 8 caracteres).&#13;&#10;&#13;&#10;4. **Espera a que el script complete el despliegue**&#13;&#10;   - El script compila la app, crea la base de datos, sube la imagen Docker y despliega la API en ECS.&#13;&#10;   - Al finalizar, mostrará los endpoints y recursos creados.&#13;&#10;&#13;&#10;## Despliegue manual solo de ECS (si ya tienes RDS)&#13;&#10;&#13;&#10;1. **Asegúrate de tener el stack RDS desplegado y funcionando**&#13;&#10;2. **Ejecuta el script manual de ECS**&#13;&#10;   ```bash&#13;&#10;   ./scripts/deploy-ecs-manual.sh [dev|staging|prod]&#13;&#10;   ```&#13;&#10;   - Ingresa la contraseña de la base de datos cuando se solicite.&#13;&#10;&#13;&#10;## Pruebas y endpoints&#13;&#10;&#13;&#10;- Verifica el estado de la API:&#13;&#10;  ```&#13;&#10;  http://&lt;endpoint-ecs&gt;:8080/actuator/health&#13;&#10;  ```&#13;&#10;- Endpoints principales:&#13;&#10;  - Obtener festivos: `/festivos/obtener/{año}`&#13;&#10;  - Verificar festivo: `/festivos/verificar/{año}/{mes}/{dia}`&#13;&#10;&#13;&#10;## Recursos creados&#13;&#10;&#13;&#10;- **RDS PostgreSQL**: Instancia db.t3.micro (Free Tier)&#13;&#10;- **ECR**: Repositorio Docker&#13;&#10;- **ECS Fargate**: Servicio API&#13;&#10;- **CloudWatch Logs**: Grupo de logs para la API&#13;&#10;- **Secrets Manager**: Contraseña de la base de datos&#13;&#10;&#13;&#10;## Consideraciones Free Tier&#13;&#10;&#13;&#10;- No crear más de 1 instancia RDS db.t3.micro&#13;&#10;- No exceder 750 horas/mes de uso&#13;&#10;- Mantener almacenamiento ≤ 20GB&#13;&#10;- Monitorear uso mensual en AWS Cost Explorer&#13;&#10;&#13;&#10;## Limpieza de recursos&#13;&#10;&#13;&#10;Para evitar costos, elimina los stacks cuando no los necesites:&#13;&#10;```bash&#13;&#10;aws cloudformation delete-stack --stack-name festivos-rds-dev --region us-east-1&#13;&#10;aws cloudformation delete-stack --stack-name festivos-ecs-dev --region us-east-1&#13;&#10;```&#13;&#10;&#13;&#10;## Soporte&#13;&#10;&#13;&#10;Para dudas o problemas, revisa los logs en CloudWatch y la documentación de AWS." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infrastructure/ecs-cloudformation.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infrastructure/ecs-cloudformation.yml" />
              <option name="originalContent" value="AWSTemplateFormatVersion: '2010-09-09'&#10;Description: 'ECS Fargate deployment for Spring Festivos API - Free Tier'&#10;&#10;Parameters:&#10;  Environment:&#10;    Type: String&#10;  VPCId:&#10;    Type: AWS::EC2::VPC::Id&#10;  PrivateSubnetIds:&#10;    Type: CommaDelimitedList&#10;  DBSecurityGroupId:&#10;    Type: AWS::EC2::SecurityGroup::Id&#10;  DBURL:&#10;    Type: String&#10;  DBPassword:&#10;    Type: String&#10;    Type: String&#10;&#10;Resources:&#10;  ECSCluster:&#10;    Type: AWS::ECS::Cluster&#10;    Properties:&#10;      ClusterName: !Sub 'festivos-cluster-${Environment}'&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;  TaskExecutionRole:&#10;    Type: AWS::IAM::Role&#10;    Properties:&#10;      RoleName: !Sub 'ecsTaskExecutionRole-${Environment}'&#10;      AssumeRolePolicyDocument:&#10;        Version: '2012-10-17'&#10;        Statement:&#10;          - Effect: Allow&#10;            Principal:&#10;              Service: ecs-tasks.amazonaws.com&#10;            Action: sts:AssumeRole&#10;      ManagedPolicyArns:&#10;        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&#10;      Tags:&#10;        Statement:&#10;          - Effect: Allow&#10;            Principal:&#10;              Service: ecs-tasks.amazonaws.com&#10;            Action: sts:AssumeRole&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;&#10;  APILogGroup:&#10;    Type: AWS::Logs::LogGroup&#10;    Properties:&#10;      LogGroupName: !Sub '/ecs/festivos-api-${Environment}'&#10;      RetentionInDays: 7&#10;&#10;  APISecurityGroup:&#10;    Type: AWS::EC2::SecurityGroup&#10;    Properties:&#10;      GroupDescription: API SG for Festivos API - Free Tier&#10;      VpcId: !Ref VPCId&#10;      SecurityGroupIngress:&#10;        - IpProtocol: tcp&#10;          FromPort: 8080&#10;          ToPort: 8080&#10;          CidrIp: 0.0.0.0/0&#10;      SecurityGroupEgress:&#10;        - IpProtocol: tcp&#10;          FromPort: 5432&#10;          ToPort: 5432&#10;          DestinationSecurityGroupId: !Ref DBSecurityGroupId&#10;        # Permitir HTTPS saliente para conectarse a ECR y AWS APIs&#10;        - IpProtocol: tcp&#10;          FromPort: 443&#10;          ToPort: 443&#10;          CidrIp: 0.0.0.0/0&#10;        # Permitir HTTP saliente para metadatos de AWS&#10;        - IpProtocol: tcp&#10;          FromPort: 80&#10;          ToPort: 80&#10;          CidrIp: 0.0.0.0/0&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;  TaskDefinition:&#10;    Type: AWS::ECS::TaskDefinition&#10;    Properties:&#10;      Family: !Sub 'festivos-api-${Environment}'&#10;      NetworkMode: awsvpc&#10;      RequiresCompatibilities:&#10;        - FARGATE&#10;      Cpu: '256'&#10;      Memory: '512'&#10;      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn&#10;      TaskRoleArn: !GetAtt TaskRole.Arn&#10;      ContainerDefinitions:&#10;        - Name: festivos-api&#10;          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/festivos-api-${Environment}:latest'&#10;          Cpu: 256&#10;          Memory: 512&#10;          MemoryReservation: 256&#10;          Essential: true&#10;          PortMappings:&#10;            - ContainerPort: 8080&#10;              Protocol: tcp&#10;          Environment:&#10;            - Name: SPRING_PROFILES_ACTIVE&#10;              Value: aws&#10;            - Name: SERVER_PORT&#10;              Value: '8080'&#10;            - Name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&#10;              Value: 'health,info'&#10;            - Name: SPRING_DATASOURCE_URL&#10;              Value: !Ref DBURL&#10;            - Name: SPRING_DATASOURCE_USERNAME&#10;              Value: festivos_user&#10;            - Name: SPRING_DATASOURCE_PASSWORD&#10;              Value: !Ref DBPassword&#10;          LogConfiguration:&#10;            LogDriver: awslogs&#10;            Options:&#10;              awslogs-group: !Ref APILogGroup&#10;              awslogs-region: !Ref AWSRegion&#10;              awslogs-stream-prefix: ecs&#10;&#10;  APIService:&#10;    DependsOn:&#10;              Value: !Ref DBPassword&#10;    Properties:&#10;      Cluster: !Ref ECSCluster&#10;      ServiceName: !Sub 'festivos-api-service-${Environment}'&#10;      TaskDefinition: !Ref TaskDefinition&#10;      DesiredCount: 1&#10;      LaunchType: FARGATE&#10;      NetworkConfiguration:&#10;        AwsvpcConfiguration:&#10;          AssignPublicIp: ENABLED&#10;          SecurityGroups:&#10;            - !Ref APISecurityGroup&#10;          Subnets: !Ref PrivateSubnetIds&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;Outputs:&#10;  ECSClusterName:&#10;    Description: ECS Cluster Name&#10;    Value: !Ref ECSCluster&#10;  ServiceName:&#10;    Description: ECS Service Name&#10;    Value: !GetAtt APIService.ServiceName&#10;  RepositoryUri:&#10;    Description: ECR Repository URI&#10;    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/festivos-api-${Environment}'&#10;" />
              <option name="updatedContent" value="AWSTemplateFormatVersion: '2010-09-09'&#10;Description: 'ECS Fargate deployment for Spring Festivos API - Free Tier'&#10;&#10;Parameters:&#10;  Environment:&#10;    Type: String&#10;  VPCId:&#10;    Type: AWS::EC2::VPC::Id&#10;  PrivateSubnetIds:&#10;    Type: CommaDelimitedList&#10;  DBSecurityGroupId:&#10;    Type: AWS::EC2::SecurityGroup::Id&#10;  DBURL:&#10;    Type: String&#10;  DBSecretArn:&#10;    Type: String&#10;    Description: ARN of the secret containing the database password&#10;  AWSRegion:&#10;    Type: String&#10;&#10;Resources:&#10;  ECSCluster:&#10;    Type: AWS::ECS::Cluster&#10;    Properties:&#10;      ClusterName: !Sub 'festivos-cluster-${Environment}'&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;  TaskExecutionRole:&#10;    Type: AWS::IAM::Role&#10;    Properties:&#10;      RoleName: !Sub 'ecsTaskExecutionRole-${Environment}'&#10;      AssumeRolePolicyDocument:&#10;        Version: '2012-10-17'&#10;        Statement:&#10;          - Effect: Allow&#10;            Principal:&#10;              Service: ecs-tasks.amazonaws.com&#10;            Action: sts:AssumeRole&#10;      ManagedPolicyArns:&#10;        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&#10;      Policies:&#10;        - PolicyName: SecretsManagerAccess&#10;          PolicyDocument:&#10;            Version: '2012-10-17'&#10;            Statement:&#10;              - Effect: Allow&#10;                Action:&#10;                  - secretsmanager:GetSecretValue&#10;                Resource: !Ref DBSecretArn&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;&#10;  TaskRole:&#10;    Type: AWS::IAM::Role&#10;    Properties:&#10;      RoleName: !Sub 'ecsTaskRole-${Environment}'&#10;      AssumeRolePolicyDocument:&#10;        Version: '2012-10-17'&#10;        Statement:&#10;          - Effect: Allow&#10;            Principal:&#10;              Service: ecs-tasks.amazonaws.com&#10;            Action: sts:AssumeRole&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;&#10;  APILogGroup:&#10;    Type: AWS::Logs::LogGroup&#10;    Properties:&#10;      LogGroupName: !Sub '/ecs/festivos-api-${Environment}'&#10;      RetentionInDays: 7&#10;&#10;  APISecurityGroup:&#10;    Type: AWS::EC2::SecurityGroup&#10;    Properties:&#10;      GroupDescription: API SG for Festivos API - Free Tier&#10;      VpcId: !Ref VPCId&#10;      SecurityGroupIngress:&#10;        - IpProtocol: tcp&#10;          FromPort: 8080&#10;          ToPort: 8080&#10;          CidrIp: 0.0.0.0/0&#10;      SecurityGroupEgress:&#10;        - IpProtocol: tcp&#10;          FromPort: 5432&#10;          ToPort: 5432&#10;          DestinationSecurityGroupId: !Ref DBSecurityGroupId&#10;        # Permitir HTTPS saliente para conectarse a ECR y AWS APIs&#10;        - IpProtocol: tcp&#10;          FromPort: 443&#10;          ToPort: 443&#10;          CidrIp: 0.0.0.0/0&#10;        # Permitir HTTP saliente para metadatos de AWS&#10;        - IpProtocol: tcp&#10;          FromPort: 80&#10;          ToPort: 80&#10;          CidrIp: 0.0.0.0/0&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;  TaskDefinition:&#10;    Type: AWS::ECS::TaskDefinition&#10;    Properties:&#10;      Family: !Sub 'festivos-api-${Environment}'&#10;      NetworkMode: awsvpc&#10;      RequiresCompatibilities:&#10;        - FARGATE&#10;      Cpu: '256'&#10;      Memory: '512'&#10;      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn&#10;      TaskRoleArn: !GetAtt TaskRole.Arn&#10;      ContainerDefinitions:&#10;        - Name: festivos-api&#10;          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/festivos-api-${Environment}:latest'&#10;          Cpu: 256&#10;          Memory: 512&#10;          MemoryReservation: 256&#10;          Essential: true&#10;          PortMappings:&#10;            - ContainerPort: 8080&#10;              Protocol: tcp&#10;          Environment:&#10;            - Name: SPRING_PROFILES_ACTIVE&#10;              Value: aws&#10;            - Name: SERVER_PORT&#10;              Value: '8080'&#10;            - Name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&#10;              Value: 'health,info'&#10;            - Name: SPRING_DATASOURCE_URL&#10;              Value: !Ref DBURL&#10;            - Name: SPRING_DATASOURCE_USERNAME&#10;              Value: festivos_user&#10;          Secrets:&#10;            - Name: SPRING_DATASOURCE_PASSWORD&#10;              ValueFrom: !Ref DBSecretArn&#10;          LogConfiguration:&#10;            LogDriver: awslogs&#10;            Options:&#10;              awslogs-group: !Ref APILogGroup&#10;              awslogs-region: !Ref AWSRegion&#10;              awslogs-stream-prefix: ecs&#10;&#10;  APIService:&#10;    Type: AWS::ECS::Service&#10;    DependsOn:&#10;      - TaskDefinition&#10;    Properties:&#10;      Cluster: !Ref ECSCluster&#10;      ServiceName: !Sub 'festivos-api-service-${Environment}'&#10;      TaskDefinition: !Ref TaskDefinition&#10;      DesiredCount: 1&#10;      LaunchType: FARGATE&#10;      NetworkConfiguration:&#10;        AwsvpcConfiguration:&#10;          AssignPublicIp: ENABLED&#10;          SecurityGroups:&#10;            - !Ref APISecurityGroup&#10;          Subnets: !Ref PrivateSubnetIds&#10;      Tags:&#10;        - Key: Project&#10;          Value: FestivosAPI&#10;        - Key: Environment&#10;          Value: !Ref Environment&#10;&#10;Outputs:&#10;  ECSClusterName:&#10;    Description: ECS Cluster Name&#10;    Value: !Ref ECSCluster&#10;  ServiceName:&#10;    Description: ECS Service Name&#10;    Value: !GetAtt APIService.ServiceName&#10;  RepositoryUri:&#10;    Description: ECR Repository URI&#10;    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/festivos-api-${Environment}'" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infrastructure/ecs-task-definition-dev.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infrastructure/ecs-task-definition-dev.json" />
              <option name="originalContent" value="{&#10;    &quot;family&quot;: &quot;festivos-api&quot;,&#10;    &quot;networkMode&quot;: &quot;awsvpc&quot;,&#10;    &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#10;    &quot;cpu&quot;: &quot;256&quot;,&#10;    &quot;memory&quot;: &quot;512&quot;,&#10;    &quot;executionRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskExecutionRole&quot;,&#10;    &quot;taskRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskRole&quot;,&#10;    &quot;containerDefinitions&quot;: [&#10;        {&#10;            &quot;name&quot;: &quot;festivos-api&quot;,&#10;            &quot;image&quot;: &quot;251221985158.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#10;            &quot;cpu&quot;: 256,&#10;            &quot;memory&quot;: 512,&#10;            &quot;memoryReservation&quot;: 256,&#10;            &quot;essential&quot;: true,&#10;            &quot;portMappings&quot;: [&#10;                {&#10;                    &quot;containerPort&quot;: 8080,&#10;                    &quot;protocol&quot;: &quot;tcp&quot;&#10;                }&#10;            ],&#10;            &quot;environment&quot;: [&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#10;                    &quot;value&quot;: &quot;aws&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;SERVER_PORT&quot;,&#10;                    &quot;value&quot;: &quot;8080&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&quot;,&#10;                    &quot;value&quot;: &quot;health,info&quot;&#10;&#10;" />
              <option name="updatedContent" value="{&#10;    &quot;family&quot;: &quot;festivos-api&quot;,&#10;    &quot;networkMode&quot;: &quot;awsvpc&quot;,&#10;    &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#10;    &quot;cpu&quot;: &quot;256&quot;,&#10;    &quot;memory&quot;: &quot;512&quot;,&#10;    &quot;executionRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskExecutionRole&quot;,&#10;    &quot;taskRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskRole&quot;,&#10;    &quot;containerDefinitions&quot;: [&#10;        {&#10;            &quot;name&quot;: &quot;festivos-api&quot;,&#10;            &quot;image&quot;: &quot;251221985158.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#10;            &quot;cpu&quot;: 256,&#10;            &quot;memory&quot;: 512,&#10;            &quot;memoryReservation&quot;: 256,&#10;            &quot;essential&quot;: true,&#10;            &quot;portMappings&quot;: [&#10;                {&#10;                    &quot;containerPort&quot;: 8080,&#10;                    &quot;protocol&quot;: &quot;tcp&quot;&#10;                }&#10;            ],&#10;            &quot;environment&quot;: [&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#10;                    &quot;value&quot;: &quot;aws&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;SERVER_PORT&quot;,&#10;                    &quot;value&quot;: &quot;8080&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&quot;,&#10;                    &quot;value&quot;: &quot;health,info&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_URL&quot;,&#10;                    &quot;value&quot;: &quot;jdbc:postgresql://dev-festivos-postgres.c8fk4quwch2q.us-east-1.rds.amazonaws.com:5432/festivos&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_USERNAME&quot;,&#10;                    &quot;value&quot;: &quot;festivos_user&quot;&#10;                }&#10;            ],&#10;            &quot;secrets&quot;: [&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_PASSWORD&quot;,&#10;                    &quot;valueFrom&quot;: &quot;arn:aws:secretsmanager:us-east-1:251221985158:secret:dev-festivos-db-password-XXXXXX&quot;&#10;                }&#10;            ],&#10;            &quot;logConfiguration&quot;: {&#10;                &quot;logDriver&quot;: &quot;awslogs&quot;,&#10;                &quot;options&quot;: {&#10;                    &quot;awslogs-group&quot;: &quot;/ecs/festivos-api&quot;,&#10;                    &quot;awslogs-region&quot;: &quot;us-east-1&quot;,&#10;                    &quot;awslogs-stream-prefix&quot;: &quot;ecs&quot;&#10;                }&#10;            }&#10;        }&#10;    ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infrastructure/ecs-task-definition.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infrastructure/ecs-task-definition.json" />
              <option name="originalContent" value="{&#10;    &quot;family&quot;: &quot;festivos-api&quot;,&#10;    &quot;networkMode&quot;: &quot;awsvpc&quot;,&#10;    &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#10;    &quot;cpu&quot;: &quot;256&quot;,&#10;    &quot;memory&quot;: &quot;512&quot;,&#10;    &quot;executionRoleArn&quot;: &quot;arn:aws:iam::ACCOUNT_ID:role/ecsTaskExecutionRole&quot;,&#10;    &quot;taskRoleArn&quot;: &quot;arn:aws:iam::ACCOUNT_ID:role/ecsTaskRole&quot;,&#10;    &quot;containerDefinitions&quot;: [&#10;        {&#10;            &quot;name&quot;: &quot;festivos-api&quot;,&#10;            &quot;image&quot;: &quot;ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#10;            &quot;cpu&quot;: 256,&#10;            &quot;memory&quot;: 512,&#10;            &quot;memoryReservation&quot;: 256,&#10;            &quot;essential&quot;: true,&#10;            &quot;portMappings&quot;: [&#10;                {&#10;                    &quot;containerPort&quot;: 8080,&#10;                    &quot;protocol&quot;: &quot;tcp&quot;&#10;                }&#10;            ],&#10;            &quot;environment&quot;: [&#10;                {&#10;                    &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#10;                    &quot;value&quot;: &quot;aws&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;SERVER_PORT&quot;,&#10;                    &quot;value&quot;: &quot;8080&quot;&#10;                },&#10;                {&#10;                    &quot;name&quot;: &quot;MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&quot;,&#10;                    &quot;value&quot;: &quot;health,info&quot;&#10;&#10;" />
              <option name="updatedContent" value="{&#13;&#10;    &quot;family&quot;: &quot;festivos-api&quot;,&#13;&#10;    &quot;networkMode&quot;: &quot;awsvpc&quot;,&#13;&#10;    &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#13;&#10;    &quot;cpu&quot;: &quot;256&quot;,&#13;&#10;    &quot;memory&quot;: &quot;512&quot;,&#13;&#10;    &quot;executionRoleArn&quot;: &quot;arn:aws:iam::ACCOUNT_ID:role/ecsTaskExecutionRole&quot;,&#13;&#10;    &quot;taskRoleArn&quot;: &quot;arn:aws:iam::ACCOUNT_ID:role/ecsTaskRole&quot;,&#13;&#10;    &quot;containerDefinitions&quot;: [&#13;&#10;        {&#13;&#10;            &quot;name&quot;: &quot;festivos-api&quot;,&#13;&#10;            &quot;image&quot;: &quot;ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#13;&#10;            &quot;cpu&quot;: 256,&#13;&#10;            &quot;memory&quot;: 512,&#13;&#10;            &quot;memoryReservation&quot;: 256,&#13;&#10;            &quot;essential&quot;: true,&#13;&#10;            &quot;portMappings&quot;: [&#13;&#10;                {&#13;&#10;                    &quot;containerPort&quot;: 8080,&#13;&#10;                    &quot;protocol&quot;: &quot;tcp&quot;&#13;&#10;                }&#13;&#10;            ],&#13;&#10;            &quot;environment&quot;: [&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#13;&#10;                    &quot;value&quot;: &quot;aws&quot;&#13;&#10;                },&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;SERVER_PORT&quot;,&#13;&#10;                    &quot;value&quot;: &quot;8080&quot;&#13;&#10;                },&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&quot;,&#13;&#10;                    &quot;value&quot;: &quot;health,info&quot;&#13;&#10;                },&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_URL&quot;,&#13;&#10;                    &quot;value&quot;: &quot;jdbc:postgresql://dev-festivos-postgres.c8fk4quwch2q.us-east-1.rds.amazonaws.com:5432/festivos&quot;&#13;&#10;                },&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_USERNAME&quot;,&#13;&#10;                    &quot;value&quot;: &quot;festivos_user&quot;&#13;&#10;                }&#13;&#10;            ],&#13;&#10;            &quot;secrets&quot;: [&#13;&#10;                {&#13;&#10;                    &quot;name&quot;: &quot;SPRING_DATASOURCE_PASSWORD&quot;,&#13;&#10;                    &quot;valueFrom&quot;: &quot;arn:aws:secretsmanager:us-east-1:ACCOUNT_ID:secret:festivos-db-password-XXXXXX&quot;&#13;&#10;                }&#13;&#10;            ],&#13;&#10;            &quot;logConfiguration&quot;: {&#13;&#10;                &quot;logDriver&quot;: &quot;awslogs&quot;,&#13;&#10;                &quot;options&quot;: {&#13;&#10;                    &quot;awslogs-group&quot;: &quot;/ecs/festivos-api&quot;,&#13;&#10;                    &quot;awslogs-region&quot;: &quot;us-east-1&quot;,&#13;&#10;                    &quot;awslogs-stream-prefix&quot;: &quot;ecs&quot;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    ]&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/full-deploy-test.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/full-deploy-test.sh" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/scripts/monitor-deployment.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/scripts/monitor-deployment.sh" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/task-definition-clean.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/task-definition-clean.json" />
              <option name="updatedContent" value="{&#10;  &quot;family&quot;: &quot;festivos-api&quot;,&#10;  &quot;networkMode&quot;: &quot;awsvpc&quot;,&#10;  &quot;requiresCompatibilities&quot;: [&quot;FARGATE&quot;],&#10;  &quot;cpu&quot;: &quot;256&quot;,&#10;  &quot;memory&quot;: &quot;512&quot;,&#10;  &quot;executionRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskExecutionRole&quot;,&#10;  &quot;taskRoleArn&quot;: &quot;arn:aws:iam::251221985158:role/ecsTaskRole&quot;,&#10;  &quot;containerDefinitions&quot;: [&#10;    {&#10;      &quot;name&quot;: &quot;festivos-api&quot;,&#10;      &quot;image&quot;: &quot;251221985158.dkr.ecr.us-east-1.amazonaws.com/festivos-api:latest&quot;,&#10;      &quot;cpu&quot;: 256,&#10;      &quot;memory&quot;: 512,&#10;      &quot;memoryReservation&quot;: 256,&#10;      &quot;essential&quot;: true,&#10;      &quot;portMappings&quot;: [&#10;        {&#10;          &quot;containerPort&quot;: 8080,&#10;          &quot;protocol&quot;: &quot;tcp&quot;&#10;        }&#10;      ],&#10;      &quot;environment&quot;: [&#10;        {&#10;          &quot;name&quot;: &quot;SPRING_PROFILES_ACTIVE&quot;,&#10;          &quot;value&quot;: &quot;aws&quot;&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;SERVER_PORT&quot;,&#10;          &quot;value&quot;: &quot;8080&quot;&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE&quot;,&#10;          &quot;value&quot;: &quot;health,info&quot;&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;SPRING_DATASOURCE_URL&quot;,&#10;          &quot;value&quot;: &quot;jdbc:mysql://dev-festivos-mysql.c8fk4quwch2q.us-east-1.rds.amazonaws.com:3306/festivos?serverTimezone=UTC&quot;&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;SPRING_DATASOURCE_USERNAME&quot;,&#10;          &quot;value&quot;: &quot;admin&quot;&#10;        },&#10;        {&#10;          &quot;name&quot;: &quot;SPRING_DATASOURCE_PASSWORD&quot;,&#10;          &quot;value&quot;: &quot;santiago123&quot;&#10;        }&#10;      ],&#10;      &quot;logConfiguration&quot;: {&#10;        &quot;logDriver&quot;: &quot;awslogs&quot;,&#10;        &quot;options&quot;: {&#10;          &quot;awslogs-group&quot;: &quot;/ecs/festivos-api&quot;,&#10;          &quot;awslogs-region&quot;: &quot;us-east-1&quot;,&#10;          &quot;awslogs-stream-prefix&quot;: &quot;ecs&quot;&#10;        }&#10;      },&#10;      &quot;healthCheck&quot;: {&#10;        &quot;command&quot;: [&#10;          &quot;CMD-SHELL&quot;,&#10;          &quot;curl -f http://localhost:8080/actuator/health || exit 1&quot;&#10;        ],&#10;        &quot;interval&quot;: 30,&#10;        &quot;timeout&quot;: 5,&#10;        &quot;retries&quot;: 3,&#10;        &quot;startPeriod&quot;: 60&#10;      }&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/temp-trust-policy.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/temp-trust-policy.json" />
              <option name="updatedContent" value="{&#10;  &quot;Version&quot;: &quot;2012-10-17&quot;,&#10;  &quot;Statement&quot;: [&#10;    {&#10;      &quot;Effect&quot;: &quot;Allow&quot;,&#10;      &quot;Principal&quot;: {&#10;        &quot;Service&quot;: &quot;ecs-tasks.amazonaws.com&quot;&#10;      },&#10;      &quot;Action&quot;: &quot;sts:AssumeRole&quot;&#10;    }&#10;  ]&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>